/**
 * Service t√≠nh ƒëi·ªÉm theo quy t·∫Øc Room One - WIN [1-1]
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p t√≠nh ƒëi·ªÉm theo lo·∫°i xe, khung gi·ªù v√† lo·∫°i tuy·∫øn
 * H·ªó tr·ª£ ƒëi·ªÉm float (0.5, 1.25, 1.5, 2.5, 3.5)
 * T√ÅCH RI√äNG L·ªäCH 1 CHI·ªÄU V√Ä 2 CHI·ªÄU - ƒê√É S·ª¨A ƒê·ªíNG B·ªò
 */

// Constants cho lo·∫°i xe - C·∫¨P NH·∫¨T THEO DATABASE TH·ª∞C T·∫æ
const VEHICLE_TYPES = {
  XE_4_CHO: 1,      // Database tr·∫£ v·ªÅ id=1 cho xe 4 ch·ªó
  XE_5_CHO: 2,      // Database tr·∫£ v·ªÅ id=2 cho xe 5 ch·ªó  
  XE_7_CHO: 3,      // Database tr·∫£ v·ªÅ id=3 cho xe 7 ch·ªó
  XE_16_CHO: 4,     // Database tr·∫£ v·ªÅ id=4 cho xe 16 ch·ªó
  XE_29_CHO: 5,     // Database tr·∫£ v·ªÅ id=5 cho xe 29 ch·ªó
  XE_45_CHO: 6      // Database tr·∫£ v·ªÅ id=6 cho xe 45 ch·ªó
}

// Constants cho lo·∫°i tuy·∫øn M·ªöI (t√°ch ri√™ng 1 chi·ªÅu v√† 2 chi·ªÅu)
const ROUTE_TYPES = {
  DON_SAN_BAY: 1,           // ƒê√≥n s√¢n bay
  TIEN_SAN_BAY: 2,          // Ti·ªÖn s√¢n bay
  PHO_1_CHIEU: 3,           // L·ªãch ph·ªë 1 chi·ªÅu
  PHO_2_CHIEU: 4,           // L·ªãch ph·ªë 2 chi·ªÅu
  TINH_HUYEN_1_CHIEU: 5,    // L·ªãch t·ªânh/huy·ªán 1 chi·ªÅu
  TINH_HUYEN_2_CHIEU: 6,    // L·ªãch t·ªânh/huy·ªán 2 chi·ªÅu
  HUONG_SAN_BAY_5KM: 7      // L·ªãch h∆∞·ªõng s√¢n bay b√°n k√≠nh 5km
}

// Constants cho khung gi·ªù
const TIME_RANGES = {
  EARLY_MORNING: 'early_morning',      // 5h00-11h59
  LATE_NIGHT: 'late_night',           // 12h00-4h59
  NIGHT_DEPARTURE: 'night_departure', // 00h-8h59
  DAY_DEPARTURE: 'day_departure'      // 9h00-23h59
}

/**
 * T√≠nh ƒëi·ªÉm cho l·ªãch ƒë√≥n s√¢n bay s√°ng (5h00-11h59) - ƒêi·ªÉm cao nh·∫•t
 */
function calculateAirportPickupEarlyMorningPoints(vehicleType, price) {
  if (vehicleType === VEHICLE_TYPES.XE_5_CHO) {
    if (price >= 320000) return 1.5
    if (price >= 270000) return 1.25
    if (price >= 250000) return 1.0
    return 0
  }
  
  if (vehicleType === VEHICLE_TYPES.XE_7_CHO) {
    if (price >= 380000) return 1.5
    if (price >= 330000) return 1.25
    if (price >= 300000) return 1.0
    return 0
  }
  
  // Xe 16, 29, 45 ch·ªó t√≠nh nh∆∞ xe 7 ch·ªó
  if ([VEHICLE_TYPES.XE_16_CHO, VEHICLE_TYPES.XE_29_CHO, VEHICLE_TYPES.XE_45_CHO].includes(vehicleType)) {
    if (price >= 380000) return 1.5
    if (price >= 330000) return 1.25
    if (price >= 300000) return 1.0
    return 0
  }
  
  return 0
}

/**
 * T√≠nh ƒëi·ªÉm cho l·ªãch ƒë√≥n s√¢n bay ƒë√™m (12h00-4h59) - ƒêi·ªÉm trung b√¨nh
 */
function calculateAirportPickupLateNightPoints(vehicleType, price) {
  if (vehicleType === VEHICLE_TYPES.XE_5_CHO) {
    if (price >= 250000) return 1.0
    return 0
  }
  
  if (vehicleType === VEHICLE_TYPES.XE_7_CHO) {
    if (price >= 300000) return 1.0
    return 0
  }
  
  // Xe 16, 29, 45 ch·ªó t√≠nh nh∆∞ xe 7 ch·ªó
  if ([VEHICLE_TYPES.XE_16_CHO, VEHICLE_TYPES.XE_29_CHO, VEHICLE_TYPES.XE_45_CHO].includes(vehicleType)) {
    if (price >= 300000) return 1.0
    return 0
  }
  
  return 0
}

/**
 * T√≠nh ƒëi·ªÉm cho l·ªãch ti·ªÖn s√¢n bay ƒë√™m (00h-8h59) - ƒêi·ªÉm th·∫•p
 */
function calculateAirportDepartureNightPoints(vehicleType, price) {
  if (vehicleType === VEHICLE_TYPES.XE_4_CHO) {
    if (price >= 200000) return 0.5
    return 0
  }
  
  if (vehicleType === VEHICLE_TYPES.XE_7_CHO) {
    if (price >= 220000) return 0.5
    return 0
  }
  
  // Xe 16, 29, 45 ch·ªó t√≠nh nh∆∞ xe 7 ch·ªó
  if ([VEHICLE_TYPES.XE_16_CHO, VEHICLE_TYPES.XE_29_CHO, VEHICLE_TYPES.XE_45_CHO].includes(vehicleType)) {
    if (price >= 220000) return 0.5
    return 0
  }
  
  return 0
}

/**
 * T√≠nh ƒëi·ªÉm cho l·ªãch ti·ªÖn s√¢n bay ng√†y (9h00-23h59) - ƒêi·ªÉm trung b√¨nh
 */
function calculateAirportDepartureDayPoints(vehicleType, price) {
  if (vehicleType === VEHICLE_TYPES.XE_4_CHO) {
    if (price >= 220000) return 1.0
    if (price >= 200000) return 0.75
    return 0
  }
  
  if (vehicleType === VEHICLE_TYPES.XE_7_CHO) {
    if (price >= 250000) return 1.0
    if (price >= 220000) return 0.75
    return 0
  }
  
  // Xe 16, 29, 45 ch·ªó t√≠nh nh∆∞ xe 7 ch·ªó
  if ([VEHICLE_TYPES.XE_16_CHO, VEHICLE_TYPES.XE_29_CHO, VEHICLE_TYPES.XE_45_CHO].includes(vehicleType)) {
    if (price >= 250000) return 1.0
    if (price >= 220000) return 0.75
    return 0
  }
  
  return 0
}

/**
 * T√≠nh ƒëi·ªÉm cho l·ªãch t·ªânh/huy·ªán theo gi√° (1 chi·ªÅu v√† 2 chi·ªÅu)
 */
function calculateProvinceDistrictPoints(price, isRoundTrip = false) {
  // L·ªãch d∆∞·ªõi 180k = 0 ƒëi·ªÉm
  if (price < 180000) return 0
  
  // L·ªãch 180k-300k = 0.5 ƒëi·ªÉm
  if (price >= 180000 && price < 300000) return 0.5
  
  // L·ªãch 300k-600k = 1 ƒëi·ªÉm
  if (price >= 300000 && price < 600000) return 1.0
  
  // L·ªãch 700k-900k = 1.5 ƒëi·ªÉm
  if (price >= 700000 && price < 900000) return 1.5
  
  // L·ªãch 900k-1.2M = 2 ƒëi·ªÉm
  if (price >= 900000 && price < 1200000) return 2.0
  
  // L·ªãch 1.2M-1.5M = 2.5 ƒëi·ªÉm
  if (price >= 1200000 && price < 1500000) return 2.5
  
  // L·ªãch 1.5M-1.9M = 3 ƒëi·ªÉm
  if (price >= 1500000 && price < 1900000) return 3.0
  
  // L·ªãch 1.9M-2.1M = 3.5 ƒëi·ªÉm
  if (price >= 1900000 && price <= 2100000) return 3.5
  
  // L·ªãch tr√™n 2.1M = c·∫ßn t√≠nh th·ªß c√¥ng
  return 'manual'
}

/**
 * T√≠nh ƒëi·ªÉm cho l·ªãch ph·ªë 2 chi·ªÅu theo lo·∫°i xe v√† gi√° (c√≥ kho·∫£ng c√°ch)
 */
function calculateStreetRoundTripPoints(vehicleType, price) {
  if (vehicleType === VEHICLE_TYPES.XE_5_CHO) {
    // L·ªãch 2 chi·ªÅu ph·ªë xe 5 ch·ªó: 250k-350k (0.5ƒë), 350k-450k (1ƒë), 450k-800k (1.5ƒë)
    if (price >= 250000 && price < 350000) return 0.5
    if (price >= 350000 && price < 450000) return 1.0
    if (price >= 450000 && price < 800000) return 1.5
    return 0
  }
  
  if (vehicleType === VEHICLE_TYPES.XE_7_CHO) {
    // L·ªãch 2 chi·ªÅu ph·ªë xe 7 ch·ªó: 250k-350k (0.5ƒë), 350k-450k (1ƒë), 450k-500k (1ƒë), 500k-800k (1.5ƒë)
    if (price >= 250000 && price < 350000) return 0.5
    if (price >= 350000 && price < 450000) return 1.0
    if (price >= 450000 && price < 500000) return 1.0
    if (price >= 500000 && price < 800000) return 1.5
    return 0
  }
  
  // Xe 16, 29, 45 ch·ªó t√≠nh nh∆∞ xe 7 ch·ªó
  if ([VEHICLE_TYPES.XE_16_CHO, VEHICLE_TYPES.XE_29_CHO, VEHICLE_TYPES.XE_45_CHO].includes(vehicleType)) {
    if (price >= 250000 && price < 350000) return 0.5
    if (price >= 350000 && price < 450000) return 1.0
    if (price >= 450000 && price < 500000) return 1.0
    if (price >= 500000 && price < 800000) return 1.5
    return 0
  }
  
  return 0
}

/**
 * T√≠nh ƒëi·ªÉm cho l·ªãch ph·ªë 1 chi·ªÅu theo gi√°
 */
function calculateStreetOneWayPoints(price) {
  // L·ªãch ph·ªë 1 chi·ªÅu: 180k-300k (0.5ƒë), 300k-600k (1ƒë)
  if (price < 180000) return 0
  if (price >= 180000 && price < 300000) return 0.5
  if (price >= 300000 && price < 600000) return 1.0
  if (price >= 600000 && price < 900000) return 1.5
  if (price >= 900000 && price < 1200000) return 2.0
  if (price >= 1200000 && price < 1500000) return 2.5
  if (price >= 1500000 && price < 1900000) return 3.0
  if (price >= 1900000 && price <= 2100000) return 3.5
  if (price > 2100000) return 'manual'
  
  return 0
}

/**
 * X√°c ƒë·ªãnh khung gi·ªù d·ª±a tr√™n th·ªùi gian - ƒê√É S·ª¨A CONFLICT
 * L∆∞u √Ω: Khung gi·ªù ƒë√≥n v√† ti·ªÖn s√¢n bay kh√°c nhau
 */
function getTimeRange(time) {
  if (!time) return TIME_RANGES.DAY_DEPARTURE
  
  const hour = new Date(time).getHours()
  
  // ƒê√ìN S√ÇN BAY: 5h00-11h59 (s√°ng), 12h00-4h59 (ƒë√™m)
  if (hour >= 5 && hour <= 11) return TIME_RANGES.EARLY_MORNING  // 5h00-11h59
  if (hour >= 12 || hour <= 4) return TIME_RANGES.LATE_NIGHT     // 12h00-4h59
  
  // TI·ªÑN S√ÇN BAY: 00h-8h59 (ƒë√™m), 9h00-23h59 (ng√†y)
  if (hour >= 0 && hour <= 8) return TIME_RANGES.NIGHT_DEPARTURE // 00h-8h59
  if (hour >= 9 && hour <= 23) return TIME_RANGES.DAY_DEPARTURE  // 9h00-23h59
  
  return TIME_RANGES.DAY_DEPARTURE // Fallback
}

/**
 * X√°c ƒë·ªãnh lo·∫°i tuy·∫øn d·ª±a tr√™n d·ªØ li·ªáu l·ªãch xe - ƒê√É S·ª¨A ƒê·ªíNG B·ªò
 */
function getRouteType(scheduleData) {
  const { id_loai_tuyen, thoi_gian_bat_dau_tra } = scheduleData
  
  // Ki·ªÉm tra n·∫øu c√≥ th·ªùi gian tr·∫£ (kh·ª© h·ªìi)
  const hasReturnTime = thoi_gian_bat_dau_tra && thoi_gian_bat_dau_tra.trim() !== ''
  
  console.log('getRouteType debug:', {
    id_loai_tuyen,
    thoi_gian_bat_dau_tra,
    hasReturnTime,
    routeType: id_loai_tuyen
  })
  
  // Tr·∫£ v·ªÅ tr·ª±c ti·∫øp ID lo·∫°i tuy·∫øn t·ª´ database
  // Kh√¥ng c·∫ßn logic ph·ª©c t·∫°p v√¨ ƒë√£ c√≥ 7 lo·∫°i tuy·∫øn ri√™ng bi·ªát
  return parseInt(id_loai_tuyen)
}

/**
 * T√≠nh ƒëi·ªÉm ch√≠nh cho l·ªãch xe d·ª±a tr√™n t·∫•t c·∫£ ƒëi·ªÅu ki·ªán - ƒê√É S·ª¨A ƒê·ªíNG B·ªò
 */
function calculateSchedulePoints(scheduleData) {
  try {
    const { id_loai_xe, id_loai_tuyen, thoi_gian_bat_dau_don, thoi_gian_bat_dau_tra, so_tien } = scheduleData
    
    if (!id_loai_xe || !id_loai_tuyen || !so_tien) {
      console.log('Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ t√≠nh ƒëi·ªÉm:', { id_loai_xe, id_loai_tuyen, so_tien })
      return 'manual'
    }
    
    const vehicleType = parseInt(id_loai_xe)
    const routeType = parseInt(id_loai_tuyen)
    const price = parseFloat(so_tien)
    const isRoundTrip = !!(thoi_gian_bat_dau_tra && thoi_gian_bat_dau_tra.trim() !== '')
    
    console.log('=== T√çNH ƒêI·ªÇM V·ªöI D·ªÆ LI·ªÜU M·ªöI ===')
    console.log('Vehicle Type:', vehicleType, `(Xe ${vehicleType} ch·ªó)`)
    console.log('Route Type:', routeType, `(Lo·∫°i tuy·∫øn ${routeType})`)
    console.log('Price:', price.toLocaleString('vi-VN'), 'VNƒê')
    console.log('Is Round Trip:', isRoundTrip)
    console.log('Pickup Time:', thoi_gian_bat_dau_don)
    console.log('Return Time:', thoi_gian_bat_dau_tra)
    
    let points = 0
    
    // 1. L·ªäCH ƒê√ìN S√ÇN BAY (id_loai_tuyen = 1)
    if (routeType === ROUTE_TYPES.DON_SAN_BAY) {
      const timeRange = getTimeRange(thoi_gian_bat_dau_don)
      console.log('üõ¨ ƒê√ìN S√ÇN BAY - Khung gi·ªù:', timeRange)
      
      if (timeRange === TIME_RANGES.EARLY_MORNING) {
        // 5h00-11h59: ƒêi·ªÉm cao nh·∫•t
        points = calculateAirportPickupEarlyMorningPoints(vehicleType, price)
        console.log(`‚úÖ ƒê√≥n s√¢n bay s√°ng (5h00-11h59): ${points} ƒëi·ªÉm`)
      } else if (timeRange === TIME_RANGES.LATE_NIGHT) {
        // 12h00-4h59: ƒêi·ªÉm trung b√¨nh
        points = calculateAirportPickupLateNightPoints(vehicleType, price)
        console.log(`‚úÖ ƒê√≥n s√¢n bay ƒë√™m (12h00-4h59): ${points} ƒëi·ªÉm`)
      } else {
        console.log('‚ùå Khung gi·ªù ƒë√≥n s√¢n bay kh√¥ng h·ª£p l·ªá:', timeRange)
        return 'manual'
      }
    }
    
    // 2. L·ªäCH TI·ªÑN S√ÇN BAY (id_loai_tuyen = 2)
    else if (routeType === ROUTE_TYPES.TIEN_SAN_BAY) {
      const timeRange = getTimeRange(thoi_gian_bat_dau_don)
      console.log('üõ´ TI·ªÑN S√ÇN BAY - Khung gi·ªù:', timeRange)
      
      if (timeRange === TIME_RANGES.NIGHT_DEPARTURE) {
        // 00h-8h59: ƒêi·ªÉm th·∫•p
        points = calculateAirportDepartureNightPoints(vehicleType, price)
        console.log(`‚úÖ Ti·ªÖn s√¢n bay ƒë√™m (00h-8h59): ${points} ƒëi·ªÉm`)
      } else if (timeRange === TIME_RANGES.DAY_DEPARTURE) {
        // 9h00-23h59: ƒêi·ªÉm trung b√¨nh
        points = calculateAirportDepartureDayPoints(vehicleType, price)
        console.log(`‚úÖ Ti·ªÖn s√¢n bay ng√†y (9h00-23h59): ${points} ƒëi·ªÉm`)
      } else {
        console.log('‚ùå Khung gi·ªù ti·ªÖn s√¢n bay kh√¥ng h·ª£p l·ªá:', timeRange)
        return 'manual'
      }
    }
    
    // 3. L·ªäCH PH·ªê 1 CHI·ªÄU (id_loai_tuyen = 3)
    else if (routeType === ROUTE_TYPES.PHO_1_CHIEU) {
      console.log('üèôÔ∏è L·ªäCH PH·ªê 1 CHI·ªÄU')
      points = calculateStreetOneWayPoints(price)
      console.log(`‚úÖ L·ªãch ph·ªë 1 chi·ªÅu: ${points} ƒëi·ªÉm`)
    }
    
    // 4. L·ªäCH PH·ªê 2 CHI·ªÄU (id_loai_tuyen = 4)
    else if (routeType === ROUTE_TYPES.PHO_2_CHIEU) {
      console.log('üèôÔ∏è L·ªäCH PH·ªê 2 CHI·ªÄU')
      points = calculateStreetRoundTripPoints(vehicleType, price)
      console.log(`‚úÖ L·ªãch ph·ªë 2 chi·ªÅu: ${points} ƒëi·ªÉm`)
    }
    
    // 5. L·ªäCH T·ªàNH/HUY·ªÜN 1 CHI·ªÄU (id_loai_tuyen = 5)
    else if (routeType === ROUTE_TYPES.TINH_HUYEN_1_CHIEU) {
      console.log('üèòÔ∏è L·ªäCH T·ªàNH/HUY·ªÜN 1 CHI·ªÄU')
      points = calculateProvinceDistrictPoints(price, false)
      console.log(`‚úÖ L·ªãch t·ªânh/huy·ªán 1 chi·ªÅu: ${points} ƒëi·ªÉm`)
    }
    
    // 6. L·ªäCH T·ªàNH/HUY·ªÜN 2 CHI·ªÄU (id_loai_tuyen = 6)
    else if (routeType === ROUTE_TYPES.TINH_HUYEN_2_CHIEU) {
      console.log('üèòÔ∏è L·ªäCH T·ªàNH/HUY·ªÜN 2 CHI·ªÄU')
      points = calculateProvinceDistrictPoints(price, true)
      console.log(`‚úÖ L·ªãch t·ªânh/huy·ªán 2 chi·ªÅu: ${points} ƒëi·ªÉm`)
    }
    
    // 7. L·ªäCH H∆Ø·ªöNG S√ÇN BAY B√ÅN K√çNH 5KM (id_loai_tuyen = 7)
    else if (routeType === ROUTE_TYPES.HUONG_SAN_BAY_5KM) {
      console.log('üìç L·ªäCH H∆Ø·ªöNG S√ÇN BAY 5KM')
      // T√≠nh nh∆∞ l·ªãch ti·ªÖn s√¢n bay
      const timeRange = getTimeRange(thoi_gian_bat_dau_don)
      
      if (timeRange === TIME_RANGES.NIGHT_DEPARTURE) {
        // 00h-8h59: ƒêi·ªÉm th·∫•p
        points = calculateAirportDepartureNightPoints(vehicleType, price)
        console.log(`‚úÖ L·ªãch h∆∞·ªõng s√¢n bay 5km ƒë√™m (00h-8h59): ${points} ƒëi·ªÉm`)
      } else if (timeRange === TIME_RANGES.DAY_DEPARTURE) {
        // 9h00-23h59: ƒêi·ªÉm trung b√¨nh
        points = calculateAirportDepartureDayPoints(vehicleType, price)
        console.log(`‚úÖ L·ªãch h∆∞·ªõng s√¢n bay 5km ng√†y (9h00-23h59): ${points} ƒëi·ªÉm`)
      } else {
        console.log('‚ùå Khung gi·ªù l·ªãch h∆∞·ªõng s√¢n bay kh√¥ng h·ª£p l·ªá:', timeRange)
        return 'manual'
      }
    }
    
    // Tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
    else {
      console.log('‚ùå Lo·∫°i tuy·∫øn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ t√≠nh ƒëi·ªÉm t·ª± ƒë·ªông:', routeType)
      return 'manual'
    }
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    if (points === 'manual') {
      console.log('‚ö†Ô∏è C·∫ßn t√≠nh ƒëi·ªÉm th·ªß c√¥ng')
      return 'manual'
    }
    
    if (points === 0) {
      console.log('üÜì L·ªãch n√†y kh√¥ng ƒë∆∞·ª£c t√≠nh ƒëi·ªÉm (FREE)')
      return 0
    }
    
    console.log(`üéØ K·∫æT QU·∫¢: ${points} ƒëi·ªÉm`)
    console.log('=== HO√ÄN TH√ÄNH T√çNH ƒêI·ªÇM ===')
    return points
    
  } catch (error) {
    console.error('‚ùå L·ªói khi t√≠nh ƒëi·ªÉm:', error)
    return 'manual'
  }
}

/**
 * T√≠nh ƒëi·ªÉm cho giao d·ªãch (fallback method)
 */
function calculateTransactionPoints(transactionData) {
  // N·∫øu c√≥ l·ªãch xe, s·ª≠ d·ª•ng calculateSchedulePoints
  if (transactionData.id_lich_xe) {
    return calculateSchedulePoints(transactionData)
  }
  
  // Fallback: t√≠nh theo s·ªë ti·ªÅn (ƒë∆°n gi·∫£n)
  return calculatePointsByAmount(transactionData.so_tien)
}

/**
 * T√≠nh ƒëi·ªÉm theo s·ªë ti·ªÅn (fallback method)
 */
function calculatePointsByAmount(amount) {
  if (!amount || amount < 0) return 0
  
  const price = parseFloat(amount)
  
  // Logic ƒë∆°n gi·∫£n d·ª±a tr√™n gi√°
  if (price >= 1000000) return 2.0
  if (price >= 500000) return 1.0
  if (price >= 200000) return 0.5
  
  return 0
}

/**
 * L·∫•y chi ti·∫øt c√°ch t√≠nh ƒëi·ªÉm - ƒê√É S·ª¨A ƒê·ªíNG B·ªò
 */
function getPointCalculationDetails(scheduleData) {
  try {
    const { id_loai_xe, id_loai_tuyen, thoi_gian_bat_dau_don, thoi_gian_bat_dau_tra, so_tien } = scheduleData
    
    if (!id_loai_xe || !id_loai_tuyen || !so_tien) {
      return {
        vehicleType: 'Kh√¥ng x√°c ƒë·ªãnh',
        routeType: 'Kh√¥ng x√°c ƒë·ªãnh',
        timeRange: 'Kh√¥ng x√°c ƒë·ªãnh',
        price: 0,
        calculationMethod: 'Kh√¥ng th·ªÉ t√≠nh',
        reason: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt'
      }
    }
    
    const vehicleType = parseInt(id_loai_xe)
    const routeType = parseInt(id_loai_tuyen)
    const price = parseFloat(so_tien)
    const isRoundTrip = !!(thoi_gian_bat_dau_tra && thoi_gian_bat_dau_tra.trim() !== '')
    const timeRange = getTimeRange(thoi_gian_bat_dau_don)
    
    // X√°c ƒë·ªãnh t√™n lo·∫°i xe
    let vehicleTypeName = 'Kh√¥ng x√°c ƒë·ªãnh'
    if (vehicleType === VEHICLE_TYPES.XE_4_CHO) vehicleTypeName = 'Xe 4 ch·ªó'
    else if (vehicleType === VEHICLE_TYPES.XE_5_CHO) vehicleTypeName = 'Xe 5 ch·ªó'
    else if (vehicleType === VEHICLE_TYPES.XE_7_CHO) vehicleTypeName = 'Xe 7 ch·ªó'
    else if (vehicleType === VEHICLE_TYPES.XE_16_CHO) vehicleTypeName = 'Xe 16 ch·ªó'
    else if (vehicleType === VEHICLE_TYPES.XE_29_CHO) vehicleTypeName = 'Xe 29 ch·ªó'
    else if (vehicleType === VEHICLE_TYPES.XE_45_CHO) vehicleTypeName = 'Xe 45 ch·ªó'
    else vehicleTypeName = `Xe ${vehicleType} ch·ªó` // Fallback cho ID kh√°c
    
    // X√°c ƒë·ªãnh t√™n lo·∫°i tuy·∫øn theo ID m·ªõi
    let routeTypeName = 'Kh√¥ng x√°c ƒë·ªãnh'
    if (routeType === 1) routeTypeName = 'ƒê√≥n s√¢n bay'
    else if (routeType === 2) routeTypeName = 'Ti·ªÖn s√¢n bay'
    else if (routeType === 3) routeTypeName = 'Ph·ªë 1 chi·ªÅu'
    else if (routeType === 4) routeTypeName = 'Ph·ªë 2 chi·ªÅu'
    else if (routeType === 5) routeTypeName = 'T·ªânh huy·ªán 1 chi·ªÅu'
    else if (routeType === 6) routeTypeName = 'T·ªânh huy·ªán 2 chi·ªÅu'
    else if (routeType === 7) routeTypeName = 'H∆∞·ªõng s√¢n bay (5km)'
    
    // X√°c ƒë·ªãnh khung gi·ªù
    let timeRangeName = 'Kh√¥ng x√°c ƒë·ªãnh'
    if (timeRange === TIME_RANGES.EARLY_MORNING) timeRangeName = '5h00-11h59'
    else if (timeRange === TIME_RANGES.LATE_NIGHT) timeRangeName = '12h00-4h59'
    else if (timeRange === TIME_RANGES.NIGHT_DEPARTURE) timeRangeName = '00h-8h59'
    else if (timeRange === TIME_RANGES.DAY_DEPARTURE) timeRangeName = '9h00-23h59'
    
    // X√°c ƒë·ªãnh ph∆∞∆°ng ph√°p t√≠nh theo ID m·ªõi
    let calculationMethod = 'T·ª± ƒë·ªông'
    if (routeType === 1) {
      if (timeRange === TIME_RANGES.EARLY_MORNING) {
        calculationMethod = 'ƒê√≥n s√¢n bay s√°ng (ƒëi·ªÉm cao nh·∫•t)'
      } else if (timeRange === TIME_RANGES.LATE_NIGHT) {
        calculationMethod = 'ƒê√≥n s√¢n bay ƒë√™m (ƒëi·ªÉm trung b√¨nh)'
      }
    } else if (routeType === 2) {
      if (timeRange === TIME_RANGES.NIGHT_DEPARTURE) {
        calculationMethod = 'Ti·ªÖn s√¢n bay ƒë√™m (ƒëi·ªÉm th·∫•p)'
      } else if (timeRange === TIME_RANGES.DAY_DEPARTURE) {
        calculationMethod = 'Ti·ªÖn s√¢n bay ng√†y (ƒëi·ªÉm trung b√¨nh)'
      }
    } else if (routeType === 3) {
      calculationMethod = 'Ph·ªë 1 chi·ªÅu theo gi√° (180k+)'
    } else if (routeType === 4) {
      calculationMethod = 'Ph·ªë 2 chi·ªÅu theo xe v√† gi√° (250k+)'
    } else if (routeType === 5) {
      calculationMethod = 'T·ªânh huy·ªán 1 chi·ªÅu theo gi√° (180k+)'
    } else if (routeType === 6) {
      calculationMethod = 'T·ªânh huy·ªán 2 chi·ªÅu theo gi√° (180k+)'
    } else if (routeType === 7) {
      calculationMethod = 'H∆∞·ªõng s√¢n bay 5km (t√≠nh nh∆∞ ti·ªÖn s√¢n bay)'
    }
    
    return {
      vehicleType: vehicleTypeName,
      routeType: routeTypeName,
      timeRange: timeRangeName,
      price: price,
      isRoundTrip: isRoundTrip,
      calculationMethod: calculationMethod,
      reason: 'T√≠nh ƒëi·ªÉm t·ª± ƒë·ªông theo quy t·∫Øc Room One - WIN [1-1]'
    }
    
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti·∫øt t√≠nh ƒëi·ªÉm:', error)
    return {
      vehicleType: 'L·ªói',
      routeType: 'L·ªói',
      timeRange: 'L·ªói',
      price: 0,
      calculationMethod: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh',
      reason: `L·ªói: ${error.message}`
    }
  }
}

/**
 * Validate d·ªØ li·ªáu l·ªãch xe
 */
function validateScheduleData(scheduleData) {
  const errors = []
  
  if (!scheduleData.id_loai_xe) {
    errors.push('Thi·∫øu lo·∫°i xe')
  }
  
  if (!scheduleData.id_loai_tuyen) {
    errors.push('Thi·∫øu lo·∫°i tuy·∫øn')
  }
  
  if (!scheduleData.so_tien) {
    errors.push('Thi·∫øu s·ªë ti·ªÅn')
  }
  
  if (!scheduleData.thoi_gian_bat_dau_don) {
    errors.push('Thi·∫øu th·ªùi gian b·∫Øt ƒë·∫ßu ƒë√≥n')
  }
  
  if (scheduleData.so_tien && parseFloat(scheduleData.so_tien) < 0) {
    errors.push('S·ªë ti·ªÅn kh√¥ng th·ªÉ √¢m')
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors
  }
}

export {
  calculateSchedulePoints,
  calculateTransactionPoints,
  getPointCalculationDetails,
  validateScheduleData,
  VEHICLE_TYPES,
  ROUTE_TYPES,
  TIME_RANGES
}
