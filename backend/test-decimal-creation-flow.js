const { pool } = require('./config/database');

async function testDecimalCreationFlow() {
  console.log('=== TEST LU·ªíNG T·∫†O GIAO D·ªäCH V·ªöI S·ªê TH·∫¨P PH√ÇN ===\n');
  
  try {
    // Test 1: T·∫°o user test
    console.log('1. T·∫°o user test...');
    
    const [createUserResult] = await pool.execute(
      'INSERT INTO nguoi_dung (ten_dang_nhap, mat_khau_hash, email, ho_ten, so_du, diem) VALUES (?, ?, ?, ?, ?, ?)',
      ['test_decimal_flow', 'test_hash', 'test_decimal_flow@test.com', 'Test User Decimal Flow', 1000.00, 0.00]
    );
    
    const testUserId = createUserResult.insertId;
    console.log('‚úÖ T·∫°o user test v·ªõi ID:', testUserId);
    
    // Test 2: T·∫°o nh√≥m test
    console.log('\n2. T·∫°o nh√≥m test...');
    
    const [createGroupResult] = await pool.execute(
      'INSERT INTO nhom (ten_nhom, mo_ta) VALUES (?, ?)',
      ['Nh√≥m Test Decimal Flow', 'Nh√≥m ƒë·ªÉ test lu·ªìng t·∫°o giao d·ªãch v·ªõi s·ªë th·∫≠p ph√¢n']
    );
    
    const testGroupId = createGroupResult.insertId;
    console.log('‚úÖ T·∫°o nh√≥m test v·ªõi ID:', testGroupId);
    
    // Test 3: Th√™m user v√†o nh√≥m
    console.log('\n3. Th√™m user v√†o nh√≥m...');
    
    await pool.execute(
      'INSERT INTO thanh_vien_nhom (id_nguoi_dung, id_nhom) VALUES (?, ?)',
      [testUserId, testGroupId]
    );
    console.log('‚úÖ Th√™m user v√†o nh√≥m');
    
    // Test 4: M√¥ ph·ªèng request body t·ª´ frontend
    console.log('\n4. M√¥ ph·ªèng request body t·ª´ frontend...');
    
    const requestBody = {
      id_loai_giao_dich: 1,
      id_nguoi_nhan: testUserId,
      id_nhom: testGroupId,
      id_lich_xe: null,
      so_tien: 100000,
      diem: 3.5, // ƒêi·ªÉm th·∫≠p ph√¢n t·ª´ frontend
      noi_dung: 'Test giao d·ªãch v·ªõi ƒëi·ªÉm th·∫≠p ph√¢n 3.5'
    };
    
    console.log('Request body t·ª´ frontend:');
    console.log('  diem:', requestBody.diem, 'Type:', typeof requestBody.diem);
    console.log('  so_tien:', requestBody.so_tien, 'Type:', typeof requestBody.so_tien);
    
    // Test 5: M√¥ ph·ªèng c√°ch x·ª≠ l√Ω trong controller
    console.log('\n5. M√¥ ph·ªèng c√°ch x·ª≠ l√Ω trong controller...');
    
    // L·∫•y d·ªØ li·ªáu t·ª´ request body (gi·ªëng nh∆∞ trong controller)
    const {
      id_loai_giao_dich,
      id_nguoi_nhan,
      id_nhom,
      id_lich_xe,
      so_tien,
      diem,
      noi_dung
    } = requestBody;
    
    console.log('D·ªØ li·ªáu ƒë√£ extract t·ª´ request body:');
    console.log('  diem:', diem, 'Type:', typeof diem);
    console.log('  so_tien:', so_tien, 'Type:', typeof so_tien);
    
    // X·ª≠ l√Ω ƒëi·ªÉm (gi·ªëng nh∆∞ trong controller)
    let calculatedPoints = diem; // S·ª≠ d·ª•ng ƒëi·ªÉm ƒë∆∞·ª£c g·ª≠i l√™n n·∫øu c√≥
    
    console.log('ƒêi·ªÉm sau khi x·ª≠ l√Ω:');
    console.log('  calculatedPoints:', calculatedPoints, 'Type:', typeof calculatedPoints);
    
    // Test 6: M√¥ ph·ªèng c√°ch x·ª≠ l√Ω trong model
    console.log('\n6. M√¥ ph·ªèng c√°ch x·ª≠ l√Ω trong model...');
    
    // T·∫°o transaction data (gi·ªëng nh∆∞ trong controller)
    const mainTransactionData = {
      id_loai_giao_dich,
      id_nguoi_gui: 1, // Admin
      id_nguoi_nhan,
      id_nhom,
      id_lich_xe,
      so_tien,
      diem: calculatedPoints, // S·ª≠ d·ª•ng ƒëi·ªÉm ƒë√£ t√≠nh ƒë∆∞·ª£c
      noi_dung,
      trang_thai: 'cho_xac_nhan'
    };
    
    console.log('Main transaction data:');
    console.log('  diem:', mainTransactionData.diem, 'Type:', typeof mainTransactionData.diem);
    console.log('  so_tien:', mainTransactionData.so_tien, 'Type:', typeof mainTransactionData.so_tien);
    
    // X·ª≠ l√Ω trong model (gi·ªëng nh∆∞ trong Transaction.create)
    const {
      diem: modelDiem,
      so_tien: modelSoTien
    } = mainTransactionData;
    
    console.log('D·ªØ li·ªáu trong model:');
    console.log('  diem:', modelDiem, 'Type:', typeof modelDiem);
    console.log('  so_tien:', modelSoTien, 'Type:', typeof modelSoTien);
    
    // X·ª≠ l√Ω null/undefined (gi·ªëng nh∆∞ trong model)
    const processedDiem = modelDiem !== undefined && modelDiem !== null ? modelDiem : null;
    const processedSoTien = modelSoTien !== undefined && modelSoTien !== null ? modelSoTien : null;
    
    console.log('D·ªØ li·ªáu sau khi x·ª≠ l√Ω null/undefined:');
    console.log('  processedDiem:', processedDiem, 'Type:', typeof processedDiem);
    console.log('  processedSoTien:', processedSoTien, 'Type:', typeof processedSoTien);
    
    // Test 7: T·∫°o giao d·ªãch th·ª±c t·∫ø
    console.log('\n7. T·∫°o giao d·ªãch th·ª±c t·∫ø...');
    
    const [createTxResult] = await pool.execute(
      'INSERT INTO giao_dich (id_loai_giao_dich, id_nguoi_gui, id_nguoi_nhan, id_nhom, id_lich_xe, so_tien, diem, noi_dung, trang_thai) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
      [id_loai_giao_dich, 1, id_nguoi_nhan, id_nhom, id_lich_xe, processedSoTien, processedDiem, noi_dung, 'cho_xac_nhan']
    );
    
    const testTxId = createTxResult.insertId;
    console.log('‚úÖ T·∫°o giao d·ªãch test v·ªõi ID:', testTxId);
    
    // Test 8: ƒê·ªçc giao d·ªãch t·ª´ database
    console.log('\n8. ƒê·ªçc giao d·ªãch t·ª´ database...');
    
    const [readTxResult] = await pool.execute(
      'SELECT * FROM giao_dich WHERE id_giao_dich = ?',
      [testTxId]
    );
    
    const storedTx = readTxResult[0];
    console.log('Giao d·ªãch ƒë√£ l∆∞u:');
    console.log('  - ID:', storedTx.id_giao_dich);
    console.log('  - S·ªë ti·ªÅn:', storedTx.so_tien, 'Type:', typeof storedTx.so_tien);
    console.log('  - ƒêi·ªÉm:', storedTx.diem, 'Type:', typeof storedTx.diem);
    console.log('  - N·ªôi dung:', storedTx.noi_dung);
    
    // Test 9: So s√°nh gi√° tr·ªã
    console.log('\n9. So s√°nh gi√° tr·ªã...');
    
    console.log('Frontend ‚Üí Controller ‚Üí Model ‚Üí Database:');
    console.log('  Frontend diem:', requestBody.diem, 'Type:', typeof requestBody.diem);
    console.log('  Controller calculatedPoints:', calculatedPoints, 'Type:', typeof calculatedPoints);
    console.log('  Model mainTransactionData.diem:', mainTransactionData.diem, 'Type:', typeof mainTransactionData.diem);
    console.log('  Model processedDiem:', processedDiem, 'Type:', typeof processedDiem);
    console.log('  Database storedTx.diem:', storedTx.diem, 'Type:', typeof storedTx.diem);
    
    // Ki·ªÉm tra c√≥ b·ªã l√†m tr√≤n kh√¥ng
    const frontendValue = requestBody.diem;
    const databaseValue = storedTx.diem;
    
    console.log('\nK·∫øt qu·∫£ so s√°nh:');
    console.log('  Frontend == Database:', frontendValue == databaseValue ? '‚úÖ B·∫∞NG NHAU' : '‚ùå KH√ÅC NHAU');
    console.log('  Frontend === Database:', frontendValue === databaseValue ? '‚úÖ B·∫∞NG NHAU' : '‚ùå KH√ÅC NHAU');
    
    if (frontendValue !== databaseValue) {
      console.log('  ‚ùå ƒêI·ªÇM B·ªä L√ÄM TR√íN!');
      console.log('  Frontend:', frontendValue);
      console.log('  Database:', databaseValue);
      console.log('  Ch√™nh l·ªách:', Math.abs(frontendValue - databaseValue));
    } else {
      console.log('  ‚úÖ ƒêI·ªÇM KH√îNG B·ªä L√ÄM TR√íN!');
    }
    
    // D·ªçn d·∫πp
    await pool.execute('DELETE FROM giao_dich WHERE id_giao_dich = ?', [testTxId]);
    await pool.execute('DELETE FROM thanh_vien_nhom WHERE id_nguoi_dung = ? AND id_nhom = ?', [testUserId, testGroupId]);
    await pool.execute('DELETE FROM nhom WHERE id_nhom = ?', [testGroupId]);
    await pool.execute('DELETE FROM nguoi_dung WHERE id_nguoi_dung = ?', [testUserId]);
    console.log('\n‚úÖ ƒê√£ d·ªçn d·∫πp d·ªØ li·ªáu test');
    
    console.log('\n=== K·∫æT LU·∫¨N ===');
    if (frontendValue !== databaseValue) {
      console.log('‚ùå V·∫§N ƒê·ªÄ: ƒêi·ªÉm b·ªã l√†m tr√≤n khi l∆∞u v√†o database');
      console.log('üîç Nguy√™n nh√¢n: C√≥ th·ªÉ do MySQL driver ho·∫∑c database configuration');
      console.log('üí° Gi·∫£i ph√°p: C·∫ßn ki·ªÉm tra MySQL settings');
    } else {
      console.log('‚úÖ KH√îNG C√ì V·∫§N ƒê·ªÄ: ƒêi·ªÉm ƒë∆∞·ª£c l∆∞u ch√≠nh x√°c');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói test:', error);
  } finally {
    await pool.end();
    console.log('\n‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
  }
}

// Ch·∫°y test
testDecimalCreationFlow();
