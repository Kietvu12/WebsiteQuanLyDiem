console.log('=== TEST VI·ªÜC L√ÄM TR√íN S·ªê TRONG JAVASCRIPT ===\n');

// Test 1: Ki·ªÉm tra c√°c h√†m l√†m tr√≤n s·ªë
console.log('1. Ki·ªÉm tra c√°c h√†m l√†m tr√≤n s·ªë...');

const testNumbers = [3.5, 2.75, 1.25, 0.5, -3.5, -2.75];

for (const num of testNumbers) {
  console.log(`Number: ${num}`);
  console.log(`  Math.round(): ${Math.round(num)}`);
  console.log(`  Math.ceil(): ${Math.ceil(num)}`);
  console.log(`  Math.floor(): ${Math.floor(num)}`);
  console.log(`  toFixed(0): ${num.toFixed(0)}`);
  console.log(`  toFixed(1): ${num.toFixed(1)}`);
  console.log(`  toFixed(2): ${num.toFixed(2)}`);
  console.log('');
}

// Test 2: Ki·ªÉm tra c√°c to√°n t·ª≠ c√≥ th·ªÉ g√¢y l√†m tr√≤n
console.log('2. Ki·ªÉm tra c√°c to√°n t·ª≠ c√≥ th·ªÉ g√¢y l√†m tr√≤n...');

for (const num of testNumbers) {
  console.log(`Number: ${num}`);
  console.log(`  num | 0: ${num | 0}`);
  console.log(`  num >> 0: ${num >> 0}`);
  console.log(`  num >>> 0: ${num >>> 0}`);
  console.log(`  ~~num: ${~~num}`);
  console.log(`  parseInt(num): ${parseInt(num)}`);
  console.log('');
}

// Test 3: Ki·ªÉm tra v·ªõi string numbers
console.log('3. Ki·ªÉm tra v·ªõi string numbers...');

const stringNumbers = ['3.5', '2.75', '1.25', '0.5', '-3.5', '-2.75'];

for (const str of stringNumbers) {
  console.log(`String: "${str}"`);
  console.log(`  parseInt(str): ${parseInt(str)}`);
  console.log(`  parseFloat(str): ${parseFloat(str)}`);
  console.log(`  Number(str): ${Number(str)}`);
  console.log(`  +str: ${+str}`);
  console.log(`  str | 0: ${str | 0}`);
  console.log(`  str >> 0: ${str >> 0}`);
  console.log('');
}

// Test 4: Ki·ªÉm tra v·ªõi database-like values
console.log('4. Ki·ªÉm tra v·ªõi database-like values...');

// M√¥ ph·ªèng d·ªØ li·ªáu t·ª´ database
const dbTransaction = {
  id: 1,
  so_tien: '100000.50',
  diem: '3.50'
};

console.log('Database transaction object:');
console.log('  so_tien:', dbTransaction.so_tien, '(Type:', typeof dbTransaction.so_tien, ')');
console.log('  diem:', dbTransaction.diem, '(Type:', typeof dbTransaction.diem, ')');

// Test c√°c c√°ch x·ª≠ l√Ω kh√°c nhau
console.log('\nX·ª≠ l√Ω so_tien:');
console.log('  so_tien | 0:', dbTransaction.so_tien | 0);
console.log('  so_tien >> 0:', dbTransaction.so_tien >> 0);
console.log('  parseInt(so_tien):', parseInt(dbTransaction.so_tien));
console.log('  parseFloat(so_tien):', parseFloat(dbTransaction.so_tien));
console.log('  Number(so_tien):', Number(dbTransaction.so_tien));

console.log('\nX·ª≠ l√Ω diem:');
console.log('  diem | 0:', dbTransaction.diem | 0);
console.log('  diem >> 0:', dbTransaction.diem >> 0);
console.log('  parseInt(diem):', parseInt(dbTransaction.diem));
console.log('  parseFloat(diem):', parseFloat(dbTransaction.diem));
console.log('  Number(diem):', Number(dbTransaction.diem));

// Test 5: Ki·ªÉm tra v·ªõi gi√° tr·ªã th·ª±c t·∫ø t·ª´ database
console.log('\n5. Ki·ªÉm tra v·ªõi gi√° tr·ªã th·ª±c t·∫ø t·ª´ database...');

// M√¥ ph·ªèng d·ªØ li·ªáu th·ª±c t·∫ø
const realTransaction = {
  id: 144,
  so_tien: '2000000.00',
  diem: '3.50'
};

console.log('Real transaction:');
console.log('  so_tien:', realTransaction.so_tien, '(Type:', typeof realTransaction.so_tien, ')');
console.log('  diem:', realTransaction.diem, '(Type:', typeof realTransaction.diem, ')');

// Test c√°c c√°ch x·ª≠ l√Ω kh√°c nhau
console.log('\nX·ª≠ l√Ω so_tien:');
console.log('  so_tien | 0:', realTransaction.so_tien | 0);
console.log('  so_tien >> 0:', realTransaction.so_tien >> 0);
console.log('  parseInt(so_tien):', parseInt(realTransaction.so_tien));
console.log('  parseFloat(so_tien):', parseFloat(realTransaction.so_tien));
console.log('  Number(so_tien):', Number(realTransaction.so_tien));

console.log('\nX·ª≠ l√Ω diem:');
console.log('  diem | 0:', realTransaction.diem | 0);
console.log('  diem >> 0:', realTransaction.diem >> 0);
console.log('  parseInt(diem):', parseInt(realTransaction.diem));
console.log('  parseFloat(diem):', parseFloat(realTransaction.diem));
console.log('  Number(diem):', Number(realTransaction.diem));

// Test 6: Ki·ªÉm tra v·ªõi s·ªë √¢m
console.log('\n6. Ki·ªÉm tra v·ªõi s·ªë √¢m...');

const negativeString = '-3.50';
console.log(`String: "${negativeString}"`);
console.log(`  parseInt: ${parseInt(negativeString)}`);
console.log(`  parseFloat: ${parseFloat(negativeString)}`);
console.log(`  Number: ${Number(negativeString)}`);
console.log(`  | 0: ${negativeString | 0}`);
console.log(`  >> 0: ${negativeString >> 0}`);

// Test 7: Ki·ªÉm tra v·ªõi s·ªë 0
console.log('\n7. Ki·ªÉm tra v·ªõi s·ªë 0...');

const zeroString = '0.50';
console.log(`String: "${zeroString}"`);
console.log(`  parseInt: ${parseInt(zeroString)}`);
console.log(`  parseFloat: ${parseFloat(zeroString)}`);
console.log(`  Number: ${Number(zeroString)}`);
console.log(`  | 0: ${zeroString | 0}`);
console.log(`  >> 0: ${zeroString >> 0}`);

console.log('\n=== K·∫æT LU·∫¨N ===');
console.log('‚úÖ parseInt() gi·ªØ nguy√™n s·ªë th·∫≠p ph√¢n');
console.log('‚úÖ parseFloat() gi·ªØ nguy√™n s·ªë th·∫≠p ph√¢n');
console.log('‚úÖ Number() gi·ªØ nguy√™n s·ªë th·∫≠p ph√¢n');
console.log('‚ùå | 0 l√†m tr√≤n xu·ªëng s·ªë nguy√™n');
console.log('‚ùå >> 0 l√†m tr√≤n xu·ªëng s·ªë nguy√™n');
console.log('‚ùå >>> 0 l√†m tr√≤n xu·ªëng s·ªë nguy√™n');
console.log('‚ùå ~~ l√†m tr√≤n xu·ªëng s·ªë nguy√™n');
console.log('üí° N√™n s·ª≠ d·ª•ng parseFloat() ho·∫∑c Number() ƒë·ªÉ x·ª≠ l√Ω s·ªë t·ª´ database');
console.log('üí° Tr√°nh s·ª≠ d·ª•ng c√°c to√°n t·ª≠ bitwise (|, >>, >>>, ~~) v·ªõi s·ªë th·∫≠p ph√¢n');
