const { Transaction, User, VehicleSchedule, Notification } = require('../models');
const { calculatePointsForGiaoLich } = require('../services/pointCalculationService');

class TransactionController {
  // L·∫•y t·∫•t c·∫£ giao d·ªãch (ch·ªâ admin)
  static async getAllTransactions(req, res) {
    try {
      console.log('üöÄ === getAllTransactions CALLED ===');
      console.log('üöÄ Request method:', req.method);
      console.log('üöÄ Request URL:', req.url);
      console.log('üöÄ Request user:', req.user);
      
      // Ki·ªÉm tra quy·ªÅn admin
      const isAdmin = req.user.la_admin === 1 || req.user.la_admin === true;
      
      console.log('üöÄ Is Admin check:', isAdmin);
      console.log('üöÄ req.user.la_admin:', req.user.la_admin, 'type:', typeof req.user.la_admin);
      
      if (!isAdmin) {
        console.log('‚ùå Access denied - not admin');
        return res.status(403).json({
          success: false,
          message: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem t·∫•t c·∫£ giao d·ªãch'
        });
      }
      
      console.log('‚úÖ Access granted - is admin');

      const transactions = await Transaction.getAll();
      res.json({
        success: true,
        message: 'L·∫•y danh s√°ch giao d·ªãch th√†nh c√¥ng',
        data: transactions
      });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch giao d·ªãch:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi l·∫•y danh s√°ch giao d·ªãch'
      });
    }
  }

  // L·∫•y giao d·ªãch theo ID
  static async getTransactionById(req, res) {
    try {
      const { id } = req.params;
      const transaction = await Transaction.getById(id);

      if (!transaction) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch'
        });
      }

      // Ki·ªÉm tra quy·ªÅn: ch·ªâ admin ho·∫∑c ng∆∞·ªùi li√™n quan m·ªõi ƒë∆∞·ª£c xem
      const isAdmin = req.user.la_admin === 1 || req.user.la_admin === true;
      const isSender = req.user.id_nguoi_dung === transaction.id_nguoi_gui;
      const isReceiver = req.user.id_nguoi_dung === transaction.id_nguoi_nhan;
      
      if (!isAdmin && !isSender && !isReceiver) {
        return res.status(403).json({
          success: false,
          message: 'Kh√¥ng c√≥ quy·ªÅn xem giao d·ªãch n√†y'
        });
      }

      res.json({
        success: true,
        message: 'L·∫•y th√¥ng tin giao d·ªãch th√†nh c√¥ng',
        data: transaction
      });
    } catch (error) {
      console.error('L·ªói l·∫•y th√¥ng tin giao d·ªãch:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi l·∫•y th√¥ng tin giao d·ªãch'
      });
    }
  }

  // T·∫°o giao d·ªãch m·ªõi
  static async createTransaction(req, res) {
    try {
      console.log('=== createTransaction Debug ===')
      console.log('Request user:', req.user)
      console.log('Request body:', req.body)
      console.log('Request headers:', req.headers)
      
      const {
        id_loai_giao_dich,
        id_nguoi_nhan,
        id_nhom,
        id_lich_xe,
        so_tien,
        diem,
        noi_dung
      } = req.body;

      const id_nguoi_gui = req.user.id_nguoi_dung;
      console.log('Extracted data:', {
        id_loai_giao_dich,
        id_nguoi_nhan,
        id_nhom,
        id_lich_xe,
        so_tien,
        diem,
        noi_dung,
        id_nguoi_gui
      })

      // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!id_loai_giao_dich || !id_nhom || !noi_dung) {
        console.log('Validation failed - missing required fields')
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc'
        });
      }

      // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong nh√≥m kh√¥ng
      console.log('Checking if user is member of group...')
      console.log('User is admin:', req.user.la_admin)
      
      let isMember = false
      const isAdmin = req.user.la_admin === 1 || req.user.la_admin === true;
      
      if (isAdmin) {
        // Admin c√≥ th·ªÉ t·∫°o giao d·ªãch ·ªü m·ªçi nh√≥m
        console.log('User is admin, bypassing group membership check')
        isMember = true
      } else {
        // User th∆∞·ªùng ph·∫£i ki·ªÉm tra th√†nh vi√™n nh√≥m
        console.log('User is not admin, checking group membership...')
        const { Group } = require('../models');
        isMember = await Group.isMember(id_nhom, id_nguoi_gui);
      }
      
      console.log('Group membership check result:', isMember)
      
      if (!isMember) {
        console.log('User is not a member of the group')
        return res.status(403).json({
          success: false,
          message: 'B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa nh√≥m n√†y'
        });
      }

      console.log('User is member of group, proceeding with transaction creation...')

      // T·ª± ƒë·ªông t√≠nh ƒëi·ªÉm cho giao d·ªãch Giao l·ªãch n·∫øu c√≥ l·ªãch xe
      let calculatedPoints = diem; // S·ª≠ d·ª•ng ƒëi·ªÉm ƒë∆∞·ª£c g·ª≠i l√™n n·∫øu c√≥
      
      if (id_loai_giao_dich === 1 && id_lich_xe && !diem) { // Giao l·ªãch c√≥ l·ªãch xe nh∆∞ng ch∆∞a c√≥ ƒëi·ªÉm
        console.log('=== T·ª∞ ƒê·ªòNG T√çNH ƒêI·ªÇM CHO GIAO D·ªäCH GIAO L·ªäCH ===');
        console.log('ID l·ªãch xe:', id_lich_xe);
        
        try {
          const pointCalculationResult = await calculatePointsForGiaoLich(id_lich_xe);
          
          if (pointCalculationResult.success) {
            if (pointCalculationResult.points === 'manual') {
              console.log('‚ö†Ô∏è C·∫ßn t√≠nh ƒëi·ªÉm th·ªß c√¥ng cho l·ªãch xe n√†y');
              calculatedPoints = null; // ƒê·ªÉ admin nh·∫≠p th·ªß c√¥ng
            } else {
              calculatedPoints = pointCalculationResult.points;
              console.log(`‚úÖ T·ª± ƒë·ªông t√≠nh ƒë∆∞·ª£c ${calculatedPoints} ƒëi·ªÉm cho l·ªãch xe`);
            }
          } else {
            console.log('‚ùå Kh√¥ng th·ªÉ t√≠nh ƒëi·ªÉm t·ª± ƒë·ªông:', pointCalculationResult.message);
            calculatedPoints = null; // ƒê·ªÉ admin nh·∫≠p th·ªß c√¥ng
          }
        } catch (error) {
          console.error('‚ùå L·ªói khi t√≠nh ƒëi·ªÉm t·ª± ƒë·ªông:', error);
          calculatedPoints = null; // ƒê·ªÉ admin nh·∫≠p th·ªß c√¥ng
        }
      }

      // X·ª≠ l√Ω theo lo·∫°i giao d·ªãch
      let trang_thai = 'cho_xac_nhan';
      if (id_loai_giao_dich === 4 || id_loai_giao_dich === 5) {
        // "San cho" (id=4) v√† "Nh·∫≠n san" (id=5) kh√¥ng c·∫ßn x√°c nh·∫≠n, t·ª± ƒë·ªông ho√†n th√†nh
        trang_thai = 'hoan_thanh';
        console.log('Giao d·ªãch San cho/Nh·∫≠n san - t·ª± ƒë·ªông ho√†n th√†nh');
      }
      
      // T·∫°o giao d·ªãch ch√≠nh
      console.log('Creating main transaction in database...')
      const mainTransactionData = {
        id_loai_giao_dich,
        id_nguoi_gui,
        id_nguoi_nhan,
        id_nhom,
        id_lich_xe,
        so_tien,
        diem: calculatedPoints, // S·ª≠ d·ª•ng ƒëi·ªÉm ƒë√£ t√≠nh ƒë∆∞·ª£c
        noi_dung,
        trang_thai
      };
      
      const mainTransactionId = await Transaction.create(mainTransactionData);
      console.log('Main transaction created with ID:', mainTransactionId)

      // T·∫°o giao d·ªãch ƒë·ªëi ·ª©ng n·∫øu c·∫ßn
      let oppositeTransactionId = null;
      
      if (id_loai_giao_dich === 1) { // Giao l·ªãch
        console.log('=== T·∫†O GIAO D·ªäCH ƒê·ªêI ·ª®NG: NH·∫¨N L·ªäCH ===')
        
        // T·∫°o giao d·ªãch "Nh·∫≠n l·ªãch" ƒë·ªëi ·ª©ng
        const oppositeTransactionData = {
          id_loai_giao_dich: 2, // Nh·∫≠n l·ªãch
          id_nguoi_gui: id_nguoi_nhan, // Ng∆∞·ªùi nh·∫≠n l·ªãch tr·ªü th√†nh ng∆∞·ªùi g·ª≠i
          id_nguoi_nhan: id_nguoi_gui, // Ng∆∞·ªùi giao l·ªãch tr·ªü th√†nh ng∆∞·ªùi nh·∫≠n
          id_nhom,
          id_lich_xe,
          so_tien: so_tien ? -so_tien : null, // ƒê·∫£o d·∫•u ti·ªÅn (ng∆∞·ªùi nh·∫≠n l·ªãch s·∫Ω b·ªã tr·ª´ ti·ªÅn)
          diem: calculatedPoints ? -calculatedPoints : null, // ƒê·∫£o d·∫•u ƒëi·ªÉm ƒë√£ t√≠nh ƒë∆∞·ª£c
          noi_dung: `Nh·∫≠n l·ªãch: ${noi_dung}`,
          trang_thai: 'cho_xac_nhan' // Ch·ªù x√°c nh·∫≠n
        };
        
        oppositeTransactionId = await Transaction.create(oppositeTransactionData);
        console.log('Opposite transaction (Nh·∫≠n l·ªãch) created with ID:', oppositeTransactionId)
        
      } else if (id_loai_giao_dich === 4) { // San cho
        console.log('=== T·∫†O GIAO D·ªäCH ƒê·ªêI ·ª®NG: NH·∫¨N SAN ===')
        
        // T·∫°o giao d·ªãch "Nh·∫≠n san" ƒë·ªëi ·ª©ng
        const oppositeTransactionData = {
          id_loai_giao_dich: 5, // Nh·∫≠n san
          id_nguoi_gui: id_nguoi_nhan, // Ng∆∞·ªùi nh·∫≠n san tr·ªü th√†nh ng∆∞·ªùi g·ª≠i
          id_nguoi_nhan: id_nguoi_gui, // Ng∆∞·ªùi san cho tr·ªü th√†nh ng∆∞·ªùi nh·∫≠n
          id_nhom,
          id_lich_xe: null, // San cho kh√¥ng c√≥ l·ªãch xe
          so_tien: so_tien ? -so_tien : null, // ƒê·∫£o d·∫•u ti·ªÅn
          diem: calculatedPoints ? -calculatedPoints : null, // ƒê·∫£o d·∫•u ƒëi·ªÉm ƒë√£ t√≠nh ƒë∆∞·ª£c
          noi_dung: `Nh·∫≠n san: ${noi_dung}`,
          trang_thai: 'hoan_thanh' // T·ª± ƒë·ªông ho√†n th√†nh
        };
        
        oppositeTransactionId = await Transaction.create(oppositeTransactionData);
        console.log('Opposite transaction (Nh·∫≠n san) created with ID:', oppositeTransactionId)
        
        // C·∫¨P NH·∫¨T S·ªê D∆Ø V√Ä ƒêI·ªÇM NGAY L·∫¨P T·ª®C CHO GIAO D·ªäCH SAN CHO - NH·∫¨N SAN
        console.log('=== C·∫¨P NH·∫¨T S·ªê D∆Ø V√Ä ƒêI·ªÇM NGAY L·∫¨P T·ª®C ===')
        try {
          // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
          const sender = await User.getById(id_nguoi_gui);
          const receiver = await User.getById(id_nguoi_nhan);
          
          if (sender && receiver) {
            console.log('Sender found:', { id: sender.id_nguoi_dung, balance: sender.so_du, points: sender.diem })
            console.log('Receiver found:', { id: receiver.id_nguoi_dung, balance: receiver.so_du, points: receiver.diem })
            
            // T√≠nh to√°n s·ªë d∆∞ v√† ƒëi·ªÉm m·ªõi
            const moneyChange = so_tien || 0;
            const pointsChange = calculatedPoints || 0;
            
            // Ng∆∞·ªùi san B·ªä TR·ª™ ti·ªÅn v√† ƒëi·ªÉm
            const newSenderBalance = parseFloat(sender.so_du) - parseFloat(moneyChange);
            const newSenderPoints = parseInt(sender.diem) - parseInt(pointsChange);
            
            // Ng∆∞·ªùi nh·∫≠n san ƒê∆Ø·ª¢C C·ªòNG ti·ªÅn v√† ƒëi·ªÉm
            const newReceiverBalance = parseFloat(receiver.so_du) + parseFloat(moneyChange);
            const newReceiverPoints = parseInt(receiver.diem) + parseInt(pointsChange);
            
            console.log('=== K·∫æT QU·∫¢ T√çNH TO√ÅN SAN CHO ===')
            console.log(`Ng∆∞·ªùi san (B·ªä TR·ª™):`)
            console.log('  - C≈©: Balance:', sender.so_du, 'Points:', sender.diem)
            console.log('  - M·ªõi: Balance:', newSenderBalance, 'Points:', newSenderPoints)
            console.log('  - Thay ƒë·ªïi: -', moneyChange, 'VNƒê, -', pointsChange, 'ƒëi·ªÉm')
            
            console.log(`Ng∆∞·ªùi nh·∫≠n san (ƒê∆Ø·ª¢C C·ªòNG):`)
            console.log('  - C≈©: Balance:', receiver.so_du, 'Points:', receiver.diem)
            console.log('  - M·ªõi: Balance:', newReceiverBalance, 'Points:', newReceiverPoints)
            console.log('  - Thay ƒë·ªïi: +', moneyChange, 'VNƒê, +', pointsChange, 'ƒëi·ªÉm')
            
            // C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi san
            const senderUpdateResult = await User.updateBalanceAndPoints(
              id_nguoi_gui,
              newSenderBalance,
              newSenderPoints
            );
            console.log(`‚úÖ C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi san th√†nh c√¥ng (B·ªä TR·ª™)`)

            // C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi nh·∫≠n san
            const receiverUpdateResult = await User.updateBalanceAndPoints(
              id_nguoi_nhan,
              newReceiverBalance,
              newReceiverPoints
            );
            console.log(`‚úÖ C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi nh·∫≠n san th√†nh c√¥ng (ƒê∆Ø·ª¢C C·ªòNG)`)
            
            console.log('=== C·∫¨P NH·∫¨T S·ªê D∆Ø V√Ä ƒêI·ªÇM HO√ÄN T·∫§T ===')
          } else {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞/ƒëi·ªÉm')
            console.log('Sender:', sender ? 'Found' : 'Not found')
            console.log('Receiver:', receiver ? 'Found' : 'Not found')
          }
        } catch (balanceError) {
          console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho giao d·ªãch San cho:')
          console.error('Error details:', balanceError)
          console.error('Error message:', balanceError.message)
          console.error('Error stack:', balanceError.stack)
          // Kh√¥ng d·ª´ng qu√° tr√¨nh t·∫°o giao d·ªãch n·∫øu c·∫≠p nh·∫≠t s·ªë d∆∞/ƒëi·ªÉm th·∫•t b·∫°i
        }
      }

      // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n (n·∫øu c√≥)
      if (id_nguoi_nhan) {
        console.log('=== T·∫†O TH√îNG B√ÅO CHO NG∆Ø·ªúI NH·∫¨N ===')
        console.log('ID ng∆∞·ªùi nh·∫≠n:', id_nguoi_nhan)
        console.log('ID giao d·ªãch ch√≠nh:', mainTransactionId)
        console.log('ID giao d·ªãch ƒë·ªëi ·ª©ng:', oppositeTransactionId)
        console.log('Lo·∫°i giao d·ªãch:', id_loai_giao_dich)
        console.log('T√™n ng∆∞·ªùi g·ª≠i:', req.user.ten_dang_nhap)
        
        let notificationContent = '';
        switch (id_loai_giao_dich) {
          case 1: // Giao l·ªãch
            let tienText = '';
            let diemText = '';
            
            if (so_tien !== null && so_tien !== undefined && so_tien !== 0) {
              tienText = so_tien > 0 ? `nh·∫≠n ${so_tien.toLocaleString('vi-VN')} VNƒê` : `tr·∫£ ${Math.abs(so_tien).toLocaleString('vi-VN')} VNƒê`;
            }
            
            if (calculatedPoints !== null && calculatedPoints !== undefined && calculatedPoints !== 0) {
              diemText = calculatedPoints > 0 ? `nh·∫≠n ${calculatedPoints} ƒëi·ªÉm` : `tr·∫£ ${Math.abs(calculatedPoints)} ƒëi·ªÉm`;
            }
            
            // Th√™m th√¥ng tin l·ªãch xe n·∫øu c√≥
            let lichXeText = '';
            if (id_lich_xe) {
              lichXeText = ' (c√≥ l·ªãch xe ƒëi k√®m)';
            }
            
            if (tienText && diemText) {
              notificationContent = `B·∫°n c√≥ l·ªãch xe m·ªõi t·ª´ ${req.user.ten_dang_nhap} - ${tienText} v√† ${diemText}${lichXeText}`;
            } else if (tienText) {
              notificationContent = `B·∫°n c√≥ l·ªãch xe m·ªõi t·ª´ ${req.user.ten_dang_nhap} - ${tienText}${lichXeText}`;
            } else if (diemText) {
              notificationContent = `B·∫°n c√≥ l·ªãch xe m·ªõi t·ª´ ${req.user.ten_dang_nhap} - ${diemText}${lichXeText}`;
            } else {
              notificationContent = `B·∫°n c√≥ l·ªãch xe m·ªõi t·ª´ ${req.user.ten_dang_nhap}${lichXeText}`;
            }
            break;
          case 2: // Nh·∫≠n l·ªãch
            notificationContent = `L·ªãch xe c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n`;
            break;
          case 4: // San cho
            let sanTienText = '';
            let sanDiemText = '';
            
            if (so_tien !== null && so_tien !== undefined && so_tien !== 0) {
              sanTienText = so_tien > 0 ? `nh·∫≠n ${so_tien.toLocaleString('vi-VN')} VNƒê` : `tr·∫£ ${Math.abs(so_tien).toLocaleString('vi-VN')} VNƒê`;
            }
            
            if (calculatedPoints !== null && calculatedPoints !== undefined && calculatedPoints !== 0) {
              sanDiemText = calculatedPoints > 0 ? `nh·∫≠n ${calculatedPoints} ƒëi·ªÉm` : `tr·∫£ ${Math.abs(calculatedPoints)} ƒëi·ªÉm`;
            }
            
            if (sanTienText && sanDiemText) {
              notificationContent = `B·∫°n ƒë∆∞·ª£c ${sanTienText} v√† ${sanDiemText} t·ª´ ${req.user.ten_dang_nhap} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            } else if (sanTienText) {
              notificationContent = `B·∫°n ƒë∆∞·ª£c ${sanTienText} t·ª´ ${req.user.ten_dang_nhap} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            } else if (sanDiemText) {
              notificationContent = `B·∫°n ƒë∆∞·ª£c ${sanDiemText} t·ª´ ${req.user.ten_dang_nhap} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            } else {
              notificationContent = `B·∫°n ƒë∆∞·ª£c san cho t·ª´ ${req.user.ten_dang_nhap} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            }
            break;
          case 5: // Nh·∫≠n san
            notificationContent = `B·∫°n ƒë√£ nh·∫≠n ƒëi·ªÉm t·ª´ ${req.user.ten_dang_nhap} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            break;
        }

        console.log('N·ªôi dung th√¥ng b√°o:', notificationContent)

        if (notificationContent) {
          console.log('B·∫Øt ƒë·∫ßu t·∫°o th√¥ng b√°o...')
          try {
            const notificationData = {
            id_nguoi_dung: id_nguoi_nhan,
            id_giao_dich: mainTransactionId,
            noi_dung: notificationContent
            };
            console.log('D·ªØ li·ªáu th√¥ng b√°o:', notificationData)
            
            const notificationId = await Notification.create(notificationData);
            console.log('‚úÖ Th√¥ng b√°o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID:', notificationId)
            console.log('=== TH√îNG B√ÅO ƒê√É ƒê∆Ø·ª¢C G·ª¨I ===')
          } catch (notificationError) {
            console.error('‚ùå L·ªói khi t·∫°o th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n:')
            console.error('Error details:', notificationError)
            console.error('Error message:', notificationError.message)
            console.error('Error stack:', notificationError.stack)
            // Kh√¥ng d·ª´ng qu√° tr√¨nh t·∫°o giao d·ªãch n·∫øu t·∫°o th√¥ng b√°o th·∫•t b·∫°i
          }
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng c√≥ n·ªôi dung th√¥ng b√°o cho lo·∫°i giao d·ªãch n√†y')
        }
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi nh·∫≠n, b·ªè qua vi·ªác t·∫°o th√¥ng b√°o')
      }

      // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i (ƒë·ªÉ bi·∫øt giao d·ªãch ƒë√£ ƒë∆∞·ª£c t·∫°o)
      console.log('=== T·∫†O TH√îNG B√ÅO CHO NG∆Ø·ªúI G·ª¨I ===')
      console.log('ID ng∆∞·ªùi g·ª≠i:', id_nguoi_gui)
      console.log('ID giao d·ªãch ch√≠nh:', mainTransactionId)
      console.log('Lo·∫°i giao d·ªãch:', id_loai_giao_dich)
      
      try {
        let senderNotificationContent = '';
        switch (id_loai_giao_dich) {
          case 1: // Giao l·ªãch
            let tienText = '';
            let diemText = '';
            
            if (so_tien !== null && so_tien !== undefined && so_tien !== 0) {
              tienText = so_tien > 0 ? `nh·∫≠n ${so_tien.toLocaleString('vi-VN')} VNƒê` : `tr·∫£ ${Math.abs(so_tien).toLocaleString('vi-VN')} VNƒê`;
            }
            
            if (calculatedPoints !== null && calculatedPoints !== undefined && calculatedPoints !== 0) {
              diemText = calculatedPoints > 0 ? `nh·∫≠n ${calculatedPoints} ƒëi·ªÉm` : `tr·∫£ ${Math.abs(calculatedPoints)} ƒëi·ªÉm`;
            }
            
            // Th√™m th√¥ng tin l·ªãch xe n·∫øu c√≥
            let lichXeText = '';
            if (id_lich_xe) {
              lichXeText = ' (c√≥ l·ªãch xe ƒëi k√®m)';
            }
            
            if (tienText && diemText) {
              senderNotificationContent = `B·∫°n ƒë√£ giao l·ªãch xe cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'} - ${tienText} v√† ${diemText}${lichXeText}`;
            } else if (tienText) {
              senderNotificationContent = `B·∫°n ƒë√£ giao l·ªãch xe cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'} - ${tienText}${lichXeText}`;
            } else if (diemText) {
              senderNotificationContent = `B·∫°n ƒë√£ giao l·ªãch xe cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'} - ${diemText}${lichXeText}`;
            } else {
              senderNotificationContent = `B·∫°n ƒë√£ giao l·ªãch xe cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'}${lichXeText}`;
            }
            break;
          case 4: // San cho
            let sanTienText = '';
            let sanDiemText = '';
            
            if (so_tien !== null && so_tien !== undefined && so_tien !== 0) {
              sanTienText = so_tien > 0 ? `san cho ${so_tien.toLocaleString('vi-VN')} VNƒê` : `san cho ${Math.abs(so_tien).toLocaleString('vi-VN')} VNƒê`;
            }
            
            if (calculatedPoints !== null && calculatedPoints !== undefined && calculatedPoints !== 0) {
              sanDiemText = calculatedPoints > 0 ? `san cho ${calculatedPoints} ƒëi·ªÉm` : `san cho ${Math.abs(calculatedPoints)} ƒëi·ªÉm`;
            }
            
            if (sanTienText && sanDiemText) {
              senderNotificationContent = `B·∫°n ƒë√£ ${sanTienText} v√† ${sanDiemText} cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            } else if (sanTienText) {
              senderNotificationContent = `B·∫°n ƒë√£ ${sanTienText} cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            } else if (sanDiemText) {
              senderNotificationContent = `B·∫°n ƒë√£ ${sanDiemText} cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            } else {
              senderNotificationContent = `B·∫°n ƒë√£ san cho ${req.body.nguoi_nhan_ten || 'ng∆∞·ªùi d√πng'} (giao d·ªãch ƒë√£ ho√†n th√†nh)`;
            }
            break;
        }

        if (senderNotificationContent) {
          console.log('N·ªôi dung th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i:', senderNotificationContent)
          
          const senderNotificationData = {
            id_nguoi_dung: id_nguoi_gui,
            id_giao_dich: mainTransactionId,
            noi_dung: senderNotificationContent
          };
          
          const senderNotificationId = await Notification.create(senderNotificationData);
          console.log('‚úÖ Th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID:', senderNotificationId)
        }
      } catch (notificationError) {
        console.error('‚ùå L·ªói khi t·∫°o th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i:', notificationError)
        // Kh√¥ng d·ª´ng qu√° tr√¨nh t·∫°o giao d·ªãch n·∫øu t·∫°o th√¥ng b√°o th·∫•t b·∫°i
      }

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£
      const responseData = {
        success: true,
        message: id_loai_giao_dich === 4 ? 'T·∫°o giao d·ªãch San cho th√†nh c√¥ng v√† ƒë√£ ho√†n th√†nh' : 'T·∫°o giao d·ªãch th√†nh c√¥ng',
        data: {
          mainTransaction: {
            id: mainTransactionId,
            ...mainTransactionData
          }
        }
      };

      // Th√™m th√¥ng tin v·ªÅ ƒëi·ªÉm ƒë√£ t√≠nh ƒë∆∞·ª£c n·∫øu l√† giao d·ªãch Giao l·ªãch
      if (id_loai_giao_dich === 1 && id_lich_xe) {
        if (calculatedPoints === 'manual') {
          responseData.data.pointCalculation = {
            status: 'manual',
            message: 'C·∫ßn t√≠nh ƒëi·ªÉm th·ªß c√¥ng cho l·ªãch xe n√†y'
          };
        } else if (calculatedPoints && calculatedPoints > 0) {
          responseData.data.pointCalculation = {
            status: 'auto',
            points: calculatedPoints,
            message: `ƒê√£ t·ª± ƒë·ªông t√≠nh ƒë∆∞·ª£c ${calculatedPoints} ƒëi·ªÉm`
          };
        }
      }

      // Th√™m th√¥ng tin v·ªÅ vi·ªác c·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho giao d·ªãch San cho
      if (id_loai_giao_dich === 4) {
        responseData.data.balanceUpdate = {
          status: 'completed',
          message: 'S·ªë d∆∞ v√† ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho c·∫£ ng∆∞·ªùi san v√† ng∆∞·ªùi nh·∫≠n san',
          details: {
            sender: {
              action: 'B·ªä TR·ª™',
              moneyChange: so_tien || 0,
              pointsChange: calculatedPoints || 0
            },
            receiver: {
              action: 'ƒê∆Ø·ª¢C C·ªòNG',
              moneyChange: so_tien || 0,
              pointsChange: calculatedPoints || 0
            }
          }
        };
      }

      // Th√™m th√¥ng tin giao d·ªãch ƒë·ªëi ·ª©ng n·∫øu c√≥
      if (oppositeTransactionId) {
        responseData.data.oppositeTransaction = {
          id: oppositeTransactionId,
          message: id_loai_giao_dich === 1 ? 'Giao d·ªãch "Nh·∫≠n l·ªãch" ƒë·ªëi ·ª©ng ƒë√£ ƒë∆∞·ª£c t·∫°o' : 'Giao d·ªãch "Nh·∫≠n san" ƒë·ªëi ·ª©ng ƒë√£ ƒë∆∞·ª£c t·∫°o'
        };
      }

      console.log('‚úÖ Transaction creation completed successfully')
      console.log('Response data:', responseData)
      
      res.status(201).json(responseData);
      
    } catch (error) {
      console.error('‚ùå Error in createTransaction:', error)
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi t·∫°o giao d·ªãch: ' + error.message
      });
    }
  }

  // X√°c nh·∫≠n giao d·ªãch (cho giao d·ªãch giao l·ªãch)
  static async confirmTransaction(req, res) {
    try {
      console.log('=== confirmTransaction Debug ===')
      console.log('Request user:', req.user)
      console.log('Transaction ID:', req.params.id)
      
      const { id } = req.params;
      const transaction = await Transaction.getById(id);

      if (!transaction) {
        console.log('Transaction not found')
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch'
        });
      }

      console.log('Transaction found:', transaction)

      // Ki·ªÉm tra quy·ªÅn: ch·ªâ ng∆∞·ªùi nh·∫≠n m·ªõi ƒë∆∞·ª£c x√°c nh·∫≠n
      const isReceiver = req.user.id_nguoi_dung === transaction.id_nguoi_nhan;
      
      if (!isReceiver) {
        console.log('User is not the recipient')
        console.log('User ID:', req.user.id_nguoi_dung)
        console.log('Transaction recipient ID:', transaction.id_nguoi_nhan)
        console.log('Is Receiver:', isReceiver)
        return res.status(403).json({
          success: false,
          message: 'Ch·ªâ ng∆∞·ªùi nh·∫≠n m·ªõi ƒë∆∞·ª£c x√°c nh·∫≠n giao d·ªãch'
        });
      }

      // Ki·ªÉm tra lo·∫°i giao d·ªãch c√≥ c·∫ßn x√°c nh·∫≠n kh√¥ng
      if (transaction.id_loai_giao_dich !== 1 && transaction.id_loai_giao_dich !== 4) { // Giao l·ªãch ho·∫∑c San cho
        console.log('Transaction type does not require confirmation:', transaction.id_loai_giao_dich)
        return res.status(400).json({
          success: false,
          message: 'Lo·∫°i giao d·ªãch n√†y kh√¥ng c·∫ßn x√°c nh·∫≠n'
        });
      }

      // Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
      if (transaction.trang_thai !== 'cho_xac_nhan') {
        console.log('Transaction status is not pending:', transaction.trang_thai)
        return res.status(400).json({
          success: false,
          message: 'Giao d·ªãch n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω'
        });
      }

      console.log('Proceeding with transaction confirmation...')

      // T√¨m giao d·ªãch ƒë·ªëi ·ª©ng d·ª±a tr√™n lo·∫°i giao d·ªãch hi·ªán t·∫°i
      console.log('=== T√åM GIAO D·ªäCH ƒê·ªêI ·ª®NG ===')
      console.log('Transaction type:', transaction.id_loai_giao_dich)
      
      let oppositeTransaction;
      if (transaction.id_loai_giao_dich === 1) { // Giao l·ªãch
        // T√¨m giao d·ªãch "Nh·∫≠n l·ªãch" t∆∞∆°ng ·ª©ng
        oppositeTransaction = await Transaction.findOppositeTransaction(
          transaction.id_nguoi_gui, // ng∆∞·ªùi giao l·ªãch
          transaction.id_nguoi_nhan, // ng∆∞·ªùi nh·∫≠n l·ªãch
          transaction.id_nhom,
          transaction.id_lich_xe,
          1 // lo·∫°i giao d·ªãch "Giao l·ªãch" ƒë·ªÉ t√¨m ƒë·ªëi ·ª©ng "Nh·∫≠n l·ªãch"
        );
      } else if (transaction.id_loai_giao_dich === 4) { // San cho
        // T√¨m giao d·ªãch "Nh·∫≠n san" t∆∞∆°ng ·ª©ng
        oppositeTransaction = await Transaction.findOppositeTransaction(
          transaction.id_nguoi_gui, // ng∆∞·ªùi san
          transaction.id_nguoi_nhan, // ng∆∞·ªùi nh·∫≠n san
          transaction.id_nhom,
          transaction.id_lich_xe,
          4 // lo·∫°i giao d·ªãch "San cho" ƒë·ªÉ t√¨m ƒë·ªëi ·ª©ng "Nh·∫≠n san"
        );
      } else {
        return res.status(400).json({
          success: false,
          message: 'Lo·∫°i giao d·ªãch n√†y kh√¥ng h·ªó tr·ª£ x√°c nh·∫≠n'
        });
      }
      
      if (!oppositeTransaction) {
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y giao d·ªãch ƒë·ªëi ·ª©ng')
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch ƒë·ªëi ·ª©ng ƒë·ªÉ x√°c nh·∫≠n'
        });
      }
      
      console.log('‚úÖ T√¨m th·∫•y giao d·ªãch ƒë·ªëi ·ª©ng:', oppositeTransaction)

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·∫£ 2 giao d·ªãch
      await Transaction.updateStatus(id, 'hoan_thanh'); // Giao d·ªãch ch√≠nh
      await Transaction.updateStatus(oppositeTransaction.id_giao_dich, 'hoan_thanh'); // Giao d·ªãch ƒë·ªëi ·ª©ng
      console.log('‚úÖ C·∫£ 2 giao d·ªãch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh')

      // X·ª≠ l√Ω logic c·ªông tr·ª´ ti·ªÅn v√† ƒëi·ªÉm
      console.log('=== X·ª¨ L√ù CHUY·ªÇN TI·ªÄN V√Ä ƒêI·ªÇM ===')
      console.log('Transaction so_tien:', transaction.so_tien, 'type:', typeof transaction.so_tien)
      console.log('Transaction diem:', transaction.diem, 'type:', typeof transaction.diem)
      
      // Ki·ªÉm tra c√≥ √≠t nh·∫•t m·ªôt trong hai (ti·ªÅn ho·∫∑c ƒëi·ªÉm) ƒë·ªÉ x·ª≠ l√Ω
      const hasMoney = transaction.so_tien !== null && transaction.so_tien !== undefined && transaction.so_tien !== 0;
      const hasPoints = transaction.diem !== null && transaction.diem !== undefined && transaction.diem !== 0;
      
      console.log('Has money to process:', hasMoney)
      console.log('Has points to process:', hasPoints)
      
      if (hasMoney || hasPoints) {
        console.log('Processing balance and points transfer...')
        console.log('Transaction amount:', transaction.so_tien, 'points:', transaction.diem)
        
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const sender = await User.getById(transaction.id_nguoi_gui);
        const receiver = await User.getById(transaction.id_nguoi_nhan);
        
        if (sender && receiver) {
          console.log('Sender found:', { id: sender.id_nguoi_dung, balance: sender.so_du, points: sender.diem })
          console.log('Receiver found:', { id: receiver.id_nguoi_dung, balance: receiver.so_du, points: receiver.diem })
          
          // T√≠nh to√°n s·ªë d∆∞ v√† ƒëi·ªÉm m·ªõi d·ª±a tr√™n lo·∫°i giao d·ªãch
          const moneyChange = transaction.so_tien || 0;
          const pointsChange = transaction.diem || 0;
          
          let newSenderBalance, newSenderPoints, newReceiverBalance, newReceiverPoints;
          let senderAction, receiverAction;
          
          if (transaction.id_loai_giao_dich === 1) { // Giao l·ªãch
            // Ng∆∞·ªùi giao l·ªãch ƒê∆Ø·ª¢C C·ªòNG ti·ªÅn v√† ƒëi·ªÉm
            newSenderBalance = parseFloat(sender.so_du) + parseFloat(moneyChange);
            newSenderPoints = parseInt(sender.diem) + parseInt(pointsChange);
            // Ng∆∞·ªùi nh·∫≠n l·ªãch B·ªä TR·ª™ ti·ªÅn v√† ƒëi·ªÉm
            newReceiverBalance = parseFloat(receiver.so_du) - parseFloat(moneyChange);
            newReceiverPoints = parseInt(receiver.diem) - parseInt(pointsChange);
            senderAction = 'ƒê∆Ø·ª¢C C·ªòNG';
            receiverAction = 'B·ªä TR·ª™';
          } else if (transaction.id_loai_giao_dich === 4) { // San cho
            // Ng∆∞·ªùi san B·ªä TR·ª™ ti·ªÅn v√† ƒëi·ªÉm
            newSenderBalance = parseFloat(sender.so_du) - parseFloat(moneyChange);
            newSenderPoints = parseInt(sender.diem) - parseInt(pointsChange);
            // Ng∆∞·ªùi nh·∫≠n san ƒê∆Ø·ª¢C C·ªòNG ti·ªÅn v√† ƒëi·ªÉm
            newReceiverBalance = parseFloat(receiver.so_du) + parseFloat(moneyChange);
            newReceiverPoints = parseInt(receiver.diem) + parseInt(pointsChange);
            senderAction = 'B·ªä TR·ª™';
            receiverAction = 'ƒê∆Ø·ª¢C C·ªòNG';
          }
          
          console.log('=== K·∫æT QU·∫¢ T√çNH TO√ÅN ===')
          console.log(`Ng∆∞·ªùi g·ª≠i (${senderAction}):`)
          console.log('  - C≈©: Balance:', sender.so_du, 'Points:', sender.diem)
          console.log('  - M·ªõi: Balance:', newSenderBalance, 'Points:', newSenderPoints)
          console.log(`  - Thay ƒë·ªïi: ${senderAction === 'ƒê∆Ø·ª¢C C·ªòNG' ? '+' : '-'}`, moneyChange, 'VNƒê,', senderAction === 'ƒê∆Ø·ª¢C C·ªòNG' ? '+' : '-', pointsChange, 'ƒëi·ªÉm')
          
          console.log(`Ng∆∞·ªùi nh·∫≠n (${receiverAction}):`)
          console.log('  - C≈©: Balance:', receiver.so_du, 'Points:', receiver.diem)
          console.log('  - M·ªõi: Balance:', newReceiverBalance, 'Points:', newReceiverPoints)
          console.log(`  - Thay ƒë·ªïi: ${receiverAction === 'ƒê∆Ø·ª¢C C·ªòNG' ? '+' : '-'}`, moneyChange, 'VNƒê,', receiverAction === 'ƒê∆Ø·ª¢C C·ªòNG' ? '+' : '-', pointsChange, 'ƒëi·ªÉm')
          
          // C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi g·ª≠i
          const senderUpdateResult = await User.updateBalanceAndPoints(
            transaction.id_nguoi_gui,
            newSenderBalance,
            newSenderPoints
          );
          console.log(`‚úÖ C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi g·ª≠i th√†nh c√¥ng (${senderAction})`)

          // C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi nh·∫≠n
          const receiverUpdateResult = await User.updateBalanceAndPoints(
            transaction.id_nguoi_nhan,
            newReceiverBalance,
            newReceiverPoints
          );
          console.log(`‚úÖ C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm cho ng∆∞·ªùi nh·∫≠n th√†nh c√¥ng (${receiverAction})`)
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞/ƒëi·ªÉm')
          console.log('Sender:', sender ? 'Found' : 'Not found')
          console.log('Receiver:', receiver ? 'Found' : 'Not found')
        }
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin s·ªë ti·ªÅn ho·∫∑c ƒëi·ªÉm ƒë·ªÉ x·ª≠ l√Ω (c·∫£ hai ƒë·ªÅu b·∫±ng 0 ho·∫∑c null)')
      }

      // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i
      console.log('=== T·∫†O TH√îNG B√ÅO CHO NG∆Ø·ªúI G·ª¨I ===')
      console.log('ID ng∆∞·ªùi g·ª≠i:', transaction.id_nguoi_gui)
      console.log('ID giao d·ªãch:', id)
      console.log('T√™n ng∆∞·ªùi x√°c nh·∫≠n:', req.user.ten_dang_nhap)
      
      try {
        let notificationMessage;
        if (transaction.id_loai_giao_dich === 1) { // Giao l·ªãch
          notificationMessage = `L·ªãch xe c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n b·ªüi ${req.user.ten_dang_nhap}. B·∫°n ƒë√£ nh·∫≠n ${transaction.so_tien ? transaction.so_tien.toLocaleString('vi-VN') : 0} VNƒê v√† ${transaction.diem || 0} ƒëi·ªÉm.`;
        } else if (transaction.id_loai_giao_dich === 4) { // San cho
          notificationMessage = `Giao d·ªãch san cho c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n b·ªüi ${req.user.ten_dang_nhap}. B·∫°n ƒë√£ chuy·ªÉn ${transaction.so_tien ? transaction.so_tien.toLocaleString('vi-VN') : 0} VNƒê v√† ${transaction.diem || 0} ƒëi·ªÉm.`;
        }
        
        const notificationData = {
          id_nguoi_dung: transaction.id_nguoi_gui,
          id_giao_dich: id,
          noi_dung: notificationMessage
        };
        console.log('D·ªØ li·ªáu th√¥ng b√°o x√°c nh·∫≠n:', notificationData)
        
        const notificationId = await Notification.create(notificationData);
        console.log('‚úÖ Th√¥ng b√°o x√°c nh·∫≠n ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID:', notificationId)
        console.log('=== TH√îNG B√ÅO X√ÅC NH·∫¨N ƒê√É ƒê∆Ø·ª¢C G·ª¨I ===')
      } catch (notificationError) {
        console.error('‚ùå L·ªói khi t·∫°o th√¥ng b√°o x√°c nh·∫≠n:')
        console.error('Error details:', notificationError)
        console.error('Error message:', notificationError.message)
        console.error('Error stack:', notificationError.stack)
        // Kh√¥ng d·ª´ng qu√° tr√¨nh x√°c nh·∫≠n n·∫øu t·∫°o th√¥ng b√°o th·∫•t b·∫°i
      }

      console.log('=== confirmTransaction Success ===')
      res.json({
        success: true,
        message: 'X√°c nh·∫≠n giao d·ªãch th√†nh c√¥ng'
      });
    } catch (error) {
      console.error('=== confirmTransaction Error ===')
      console.error('Error details:', error)
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi x√°c nh·∫≠n giao d·ªãch'
      });
    }
  }

  // H·ªßy giao d·ªãch
  static async cancelTransaction(req, res) {
    try {
      console.log('=== cancelTransaction Debug ===')
      console.log('Request user:', req.user)
      console.log('Transaction ID:', req.params.id)
      
      const { id } = req.params;
      const transaction = await Transaction.getById(id);

      if (!transaction) {
        console.log('Transaction not found')
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch'
        });
      }

      console.log('Transaction found:', transaction)

      // Ki·ªÉm tra quy·ªÅn: ng∆∞·ªùi g·ª≠i, ng∆∞·ªùi nh·∫≠n ho·∫∑c admin m·ªõi ƒë∆∞·ª£c h·ªßy
      const isAdmin = req.user.la_admin === 1 || req.user.la_admin === true;
      const isSender = req.user.id_nguoi_dung === transaction.id_nguoi_gui;
      const isReceiver = req.user.id_nguoi_dung === transaction.id_nguoi_nhan;
      const canCancel = isSender || isReceiver || isAdmin;
                       
      if (!canCancel) {
        console.log('User is not authorized to cancel this transaction')
        console.log('User ID:', req.user.id_nguoi_dung)
        console.log('Sender ID:', transaction.id_nguoi_gui)
        console.log('Receiver ID:', transaction.id_nguoi_nhan)
        console.log('Is Admin:', req.user.la_admin)
        console.log('Is Sender:', isSender)
        console.log('Is Receiver:', isReceiver)
        console.log('Is Admin:', isAdmin)
        return res.status(403).json({
          success: false,
          message: 'Ch·ªâ ng∆∞·ªùi g·ª≠i, ng∆∞·ªùi nh·∫≠n ho·∫∑c admin m·ªõi c√≥ quy·ªÅn h·ªßy giao d·ªãch'
        });
      }

      // Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
      if (transaction.trang_thai !== 'cho_xac_nhan') {
        console.log('Transaction status is not pending:', transaction.trang_thai)
        return res.status(400).json({
          success: false,
          message: 'Giao d·ªãch n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω'
        });
      }

      console.log('Proceeding with transaction cancellation...')

      // N·∫øu l√† giao d·ªãch giao l·ªãch v√† c√≥ l·ªãch xe, x√≥a l·ªãch xe
      if (transaction.id_loai_giao_dich === 1 && transaction.id_lich_xe) {
        console.log('Deleting associated vehicle schedule...')
        try {
          const { VehicleSchedule } = require('../models');
          await VehicleSchedule.delete(transaction.id_lich_xe);
          console.log('Vehicle schedule deleted successfully')
        } catch (scheduleError) {
          console.error('Error deleting vehicle schedule:', scheduleError)
          // Kh√¥ng d·ª´ng qu√° tr√¨nh h·ªßy giao d·ªãch n·∫øu x√≥a l·ªãch xe th·∫•t b·∫°i
        }
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
      await Transaction.updateStatus(id, 'da_huy');
      console.log('Transaction status updated to cancelled')

      // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n (n·∫øu c√≥)
      if (transaction.id_nguoi_nhan) {
        console.log('=== T·∫†O TH√îNG B√ÅO H·ª¶Y CHO NG∆Ø·ªúI NH·∫¨N ===')
        console.log('ID ng∆∞·ªùi nh·∫≠n:', transaction.id_nguoi_nhan)
        console.log('ID giao d·ªãch:', id)
        console.log('T√™n ng∆∞·ªùi h·ªßy:', req.user.ten_dang_nhap)
        
        try {
          const notificationData = {
          id_nguoi_dung: transaction.id_nguoi_nhan,
            id_giao_dich: id,
            noi_dung: `Giao d·ªãch t·ª´ ${req.user.ten_dang_nhap} ƒë√£ b·ªã h·ªßy`
          };
          console.log('D·ªØ li·ªáu th√¥ng b√°o h·ªßy:', notificationData)
          
          const notificationId = await Notification.create(notificationData);
          console.log('‚úÖ Th√¥ng b√°o h·ªßy ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID:', notificationId)
          console.log('=== TH√îNG B√ÅO H·ª¶Y ƒê√É ƒê∆Ø·ª¢C G·ª¨I ===')
        } catch (notificationError) {
          console.error('‚ùå L·ªói khi t·∫°o th√¥ng b√°o h·ªßy:')
          console.error('Error details:', notificationError)
          console.error('Error message:', notificationError.message)
          console.error('Error stack:', notificationError.stack)
          // Kh√¥ng d·ª´ng qu√° tr√¨nh h·ªßy n·∫øu t·∫°o th√¥ng b√°o th·∫•t b·∫°i
        }
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi nh·∫≠n, b·ªè qua vi·ªác t·∫°o th√¥ng b√°o h·ªßy')
      }

      // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i (ng∆∞·ªùi giao l·ªãch) khi giao d·ªãch b·ªã h·ªßy
      console.log('=== T·∫†O TH√îNG B√ÅO H·ª¶Y CHO NG∆Ø·ªúI GIAO L·ªäCH ===')
      console.log('ID ng∆∞·ªùi giao l·ªãch:', transaction.id_nguoi_gui)
      console.log('ID giao d·ªãch:', id)
      console.log('T√™n ng∆∞·ªùi h·ªßy:', req.user.ten_dang_nhap)
      
      try {
        const notificationData = {
          id_nguoi_dung: transaction.id_nguoi_gui,
          id_giao_dich: id,
          noi_dung: `Giao d·ªãch giao l·ªãch c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy b·ªüi ${req.user.ten_dang_nhap}. L·ªãch xe ƒë√£ ƒë∆∞·ª£c x√≥a.`
        };
        console.log('D·ªØ li·ªáu th√¥ng b√°o h·ªßy cho ng∆∞·ªùi giao l·ªãch:', notificationData)
        
        const notificationId = await Notification.create(notificationData);
        console.log('‚úÖ Th√¥ng b√°o h·ªßy cho ng∆∞·ªùi giao l·ªãch ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID:', notificationId)
        console.log('=== TH√îNG B√ÅO H·ª¶Y CHO NG∆Ø·ªúI GIAO L·ªäCH ƒê√É ƒê∆Ø·ª¢C G·ª¨I ===')
      } catch (notificationError) {
        console.error('‚ùå L·ªói khi t·∫°o th√¥ng b√°o h·ªßy cho ng∆∞·ªùi giao l·ªãch:')
        console.error('Error details:', notificationError)
        console.error('Error message:', notificationError.message)
        console.error('Error stack:', notificationError.stack)
        // Kh√¥ng d·ª´ng qu√° tr√¨nh h·ªßy n·∫øu t·∫°o th√¥ng b√°o th·∫•t b·∫°i
      }

      console.log('=== cancelTransaction Success ===')
      res.json({
        success: true,
        message: 'H·ªßy giao d·ªãch th√†nh c√¥ng'
      });
    } catch (error) {
      console.error('=== cancelTransaction Error ===')
      console.error('Error details:', error)
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi h·ªßy giao d·ªãch'
      });
    }
  }

  // L·∫•y giao d·ªãch theo tr·∫°ng th√°i
  static async getTransactionsByStatus(req, res) {
    try {
      const { status } = req.params;
      const transactions = await Transaction.getByStatus(status);

      res.json({
        success: true,
        message: 'L·∫•y giao d·ªãch theo tr·∫°ng th√°i th√†nh c√¥ng',
        data: transactions
      });
    } catch (error) {
      console.error('L·ªói l·∫•y giao d·ªãch theo tr·∫°ng th√°i:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi l·∫•y giao d·ªãch theo tr·∫°ng th√°i'
      });
    }
  }

  // L·∫•y giao d·ªãch theo lo·∫°i
  static async getTransactionsByType(req, res) {
    try {
      const { typeId } = req.params;
      const transactions = await Transaction.getByType(typeId);

      res.json({
        success: true,
        message: 'L·∫•y giao d·ªãch theo lo·∫°i th√†nh c√¥ng',
        data: transactions
      });
    } catch (error) {
      console.error('L·ªói l·∫•y giao d·ªãch theo lo·∫°i:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi l·∫•y giao d·ªãch theo lo·∫°i'
      });
    }
  }

  // L·∫•y giao d·ªãch theo ng√†y
  static async getTransactionsByDate(req, res) {
    try {
      const { date } = req.params;
      const transactions = await Transaction.getByDate(date);

      res.json({
        success: true,
        message: 'L·∫•y giao d·ªãch theo ng√†y th√†nh c√¥ng',
        data: transactions
      });
    } catch (error) {
      console.error('L·ªói l·∫•y giao d·ªãch theo ng√†y:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi l·∫•y giao d·ªãch theo ng√†y'
      });
    }
  }

  // X√≥a giao d·ªãch (ch·ªâ admin)
  static async deleteTransaction(req, res) {
    try {
      const { id } = req.params;

      // Ki·ªÉm tra quy·ªÅn admin
      const isAdmin = req.user.la_admin === 1 || req.user.la_admin === true;
      
      if (!isAdmin) {
        return res.status(403).json({
          success: false,
          message: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a giao d·ªãch'
        });
      }

      const success = await Transaction.delete(id);

      if (!success) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch ƒë·ªÉ x√≥a'
        });
      }

      res.json({
        success: true,
        message: 'X√≥a giao d·ªãch th√†nh c√¥ng'
      });
    } catch (error) {
      console.error('L·ªói x√≥a giao d·ªãch:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi x√≥a giao d·ªãch'
      });
    }
  }

  // H·ªßy l·ªãch xe v√† ho√†n ti·ªÅn/ƒëi·ªÉm
  static async cancelVehicleSchedule(req, res) {
    try {
      console.log('=== cancelVehicleSchedule Debug ===')
      console.log('Request user:', req.user)
      console.log('Schedule ID:', req.params.id)
      
      const { id } = req.params;
      const userId = req.user.id_nguoi_dung;
      
      // L·∫•y th√¥ng tin l·ªãch xe
      const { VehicleSchedule } = require('../models');
      const schedule = await VehicleSchedule.getById(id);
      
      if (!schedule) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y l·ªãch xe'
        });
      }

      console.log('Schedule found:', schedule)

      // Ki·ªÉm tra quy·ªÅn: ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c admin m·ªõi ƒë∆∞·ª£c h·ªßy
      const isCreator = userId === schedule.id_nguoi_tao;
      const isAdmin = req.user.la_admin === 1 || req.user.la_admin === true;
      
      if (!isCreator && !isAdmin) {
        return res.status(403).json({
          success: false,
          message: 'Ch·ªâ ng∆∞·ªùi t·∫°o l·ªãch xe ho·∫∑c admin m·ªõi c√≥ quy·ªÅn h·ªßy l·ªãch xe n√†y'
        });
      }

      // Ki·ªÉm tra tr·∫°ng th√°i l·ªãch xe
      if (schedule.trang_thai !== 'cho_xac_nhan') {
        return res.status(400).json({
          success: false,
          message: 'L·ªãch xe n√†y kh√¥ng th·ªÉ h·ªßy (ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ h·ªßy)'
        });
      }

      console.log('Proceeding with vehicle schedule cancellation...')

      // T√¨m giao d·ªãch li√™n quan ƒë·∫øn l·ªãch xe n√†y
      const relatedTransactions = await Transaction.getByScheduleId(schedule.id_lich_xe);
      
      if (relatedTransactions && relatedTransactions.length > 0) {
        console.log('Found related transactions:', relatedTransactions.length)
        
        // X·ª≠ l√Ω ho√†n ti·ªÅn v√† ƒëi·ªÉm cho c√°c giao d·ªãch li√™n quan
        for (const transaction of relatedTransactions) {
          if (transaction.trang_thai === 'hoan_thanh') {
            console.log('Processing refund for transaction:', transaction.id_giao_dich)
            
            // Ho√†n ti·ªÅn v√† ƒëi·ªÉm
            const sender = await User.getById(transaction.id_nguoi_gui);
            const receiver = await User.getById(transaction.id_nguoi_nhan);
            
            if (sender && receiver) {
              // Ho√†n l·∫°i ti·ªÅn v√† ƒëi·ªÉm cho ng∆∞·ªùi g·ª≠i
              const refundAmount = transaction.so_tien || 0;
              const refundPoints = transaction.diem || 0;
              
              const newSenderBalance = parseFloat(sender.so_du) + parseFloat(refundAmount);
              const newSenderPoints = parseInt(sender.diem) + parseInt(refundPoints);
              
              // Ho√†n l·∫°i ti·ªÅn v√† ƒëi·ªÉm cho ng∆∞·ªùi nh·∫≠n
              const newReceiverBalance = parseFloat(receiver.so_du) - parseFloat(refundAmount);
              const newReceiverPoints = parseInt(receiver.diem) - parseInt(refundPoints);
              
              console.log('=== HO√ÄN TI·ªÄN V√Ä ƒêI·ªÇM ===')
              console.log(`Ng∆∞·ªùi g·ª≠i (ƒë∆∞·ª£c ho√†n): +${refundAmount} VNƒê, +${refundPoints} ƒëi·ªÉm`)
              console.log(`Ng∆∞·ªùi nh·∫≠n (b·ªã tr·ª´): -${refundAmount} VNƒê, -${refundPoints} ƒëi·ªÉm`)
              
              // C·∫≠p nh·∫≠t s·ªë d∆∞ v√† ƒëi·ªÉm
              await User.updateBalanceAndPoints(transaction.id_nguoi_gui, newSenderBalance, newSenderPoints);
              await User.updateBalanceAndPoints(transaction.id_nguoi_nhan, newReceiverBalance, newReceiverPoints);
              
              console.log('‚úÖ Ho√†n ti·ªÅn v√† ƒëi·ªÉm th√†nh c√¥ng')
            }
          }
        }
      }

      // H·ªßy l·ªãch xe
      const cancelSuccess = await VehicleSchedule.cancelSchedule(id, userId);
      
      if (!cancelSuccess) {
        return res.status(500).json({
          success: false,
          message: 'L·ªói khi h·ªßy l·ªãch xe'
        });
      }

      console.log('Vehicle schedule cancelled successfully')

      // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n l·ªãch (n·∫øu c√≥)
      if (schedule.id_nguoi_nhan) {
        try {
          const { Notification } = require('../models');
          const notificationData = {
            id_nguoi_dung: schedule.id_nguoi_nhan,
            noi_dung: `L·ªãch xe t·ª´ ${req.user.ten_dang_nhap} ƒë√£ b·ªã h·ªßy. Ti·ªÅn v√† ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.`
          };
          
          await Notification.create(notificationData);
          console.log('‚úÖ Th√¥ng b√°o h·ªßy l·ªãch ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng')
        } catch (notificationError) {
          console.error('‚ùå L·ªói khi t·∫°o th√¥ng b√°o h·ªßy l·ªãch:', notificationError)
        }
      }

      // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi t·∫°o l·ªãch
      try {
        const { Notification } = require('../models');
        const notificationData = {
          id_nguoi_dung: schedule.id_nguoi_tao,
          noi_dung: `L·ªãch xe c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªüi ${req.user.ten_dang_nhap}. Ti·ªÅn v√† ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.`
        };
        
        await Notification.create(notificationData);
        console.log('‚úÖ Th√¥ng b√°o h·ªßy l·ªãch cho ng∆∞·ªùi t·∫°o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng')
      } catch (notificationError) {
        console.error('‚ùå L·ªói khi t·∫°o th√¥ng b√°o h·ªßy l·ªãch cho ng∆∞·ªùi t·∫°o:', notificationError)
      }

      console.log('=== cancelVehicleSchedule Success ===')
      res.json({
        success: true,
        message: 'H·ªßy l·ªãch xe th√†nh c√¥ng. Ti·ªÅn v√† ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.',
        data: {
          scheduleId: id,
          refundProcessed: relatedTransactions && relatedTransactions.length > 0
        }
      });
    } catch (error) {
      console.error('=== cancelVehicleSchedule Error ===')
      console.error('Error details:', error)
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi h·ªßy l·ªãch xe'
      });
    }
  }
}

module.exports = TransactionController;
