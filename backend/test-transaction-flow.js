// Test script ƒë·ªÉ ki·ªÉm tra flow x√°c nh·∫≠n/h·ªßy giao d·ªãch
const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000/api';

// Test data
const testUser1 = {
  ten_dang_nhap: 'admin',
  mat_khau: 'admin123'
};

const testUser2 = {
  ten_dang_nhap: 'user1',
  mat_khau: 'user123'
};

let token1, token2;
let transactionId, scheduleId;

async function testTransactionFlow() {
  console.log('=== B·∫Øt ƒë·∫ßu test flow giao d·ªãch ===\n');

  try {
    // 1. ƒêƒÉng nh·∫≠p user 1 (admin)
    console.log('1. ƒêƒÉng nh·∫≠p user 1 (admin)...');
    const login1 = await axios.post(`${API_BASE_URL}/users/login`, testUser1);
    token1 = login1.data.data.token;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p user 1 th√†nh c√¥ng\n');

    // 2. ƒêƒÉng nh·∫≠p user 2
    console.log('2. ƒêƒÉng nh·∫≠p user 2...');
    const login2 = await axios.post(`${API_BASE_URL}/users/login`, testUser2);
    token2 = login2.data.data.token;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p user 2 th√†nh c√¥ng\n');

    // 3. L·∫•y danh s√°ch nh√≥m
    console.log('3. L·∫•y danh s√°ch nh√≥m...');
    const groups = await axios.get(`${API_BASE_URL}/groups`, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    const groupId = groups.data.data[0]?.id_nhom;
    console.log(`‚úÖ L·∫•y nh√≥m th√†nh c√¥ng, ID: ${groupId}\n`);

    // 4. L·∫•y danh s√°ch th√†nh vi√™n nh√≥m
    console.log('4. L·∫•y danh s√°ch th√†nh vi√™n nh√≥m...');
    const members = await axios.get(`${API_BASE_URL}/groups/${groupId}/members`, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    const recipientId = members.data.data.find(m => m.ten_dang_nhap === 'user1')?.id_nguoi_dung;
    console.log(`‚úÖ L·∫•y th√†nh vi√™n th√†nh c√¥ng, recipient ID: ${recipientId}\n`);

    // 5. L·∫•y lo·∫°i xe v√† tuy·∫øn
    console.log('5. L·∫•y lo·∫°i xe v√† tuy·∫øn...');
    const [vehicleTypes, routeTypes] = await Promise.all([
      axios.get(`${API_BASE_URL}/schedules/vehicle-types`, {
        headers: { Authorization: `Bearer ${token1}` }
      }),
      axios.get(`${API_BASE_URL}/schedules/route-types`, {
        headers: { Authorization: `Bearer ${token1}` }
      })
    ]);
    const vehicleTypeId = vehicleTypes.data.data[0]?.id_loai_xe;
    const routeTypeId = routeTypes.data.data[0]?.id_loai_tuyen;
    console.log(`‚úÖ L·∫•y lo·∫°i xe v√† tuy·∫øn th√†nh c√¥ng\n`);

    // 6. T·∫°o l·ªãch xe
    console.log('6. T·∫°o l·ªãch xe...');
    const scheduleData = {
      id_loai_xe: vehicleTypeId,
      id_loai_tuyen: routeTypeId,
      thoi_gian_bat_dau_don: '2024-01-20T08:00:00',
      thoi_gian_ket_thuc_don: '2024-01-20T09:00:00',
      thoi_gian_bat_dau_tra: '2024-01-20T17:00:00',
      thoi_gian_ket_thuc_tra: '2024-01-20T18:00:00',
      id_nhom: groupId
    };
    
    const schedule = await axios.post(`${API_BASE_URL}/schedules`, scheduleData, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    scheduleId = schedule.data.data.id;
    console.log(`‚úÖ T·∫°o l·ªãch xe th√†nh c√¥ng, ID: ${scheduleId}\n`);

    // 7. T·∫°o giao d·ªãch giao l·ªãch
    console.log('7. T·∫°o giao d·ªãch giao l·ªãch...');
    const transactionData = {
      id_loai_giao_dich: 1, // Giao l·ªãch
      id_nguoi_nhan: recipientId,
      id_nhom: groupId,
      id_lich_xe: scheduleId,
      so_tien: 500000,
      diem: 50,
      noi_dung: 'Giao l·ªãch xe kh√°ch H√† N·ªôi - H·∫£i Ph√≤ng'
    };
    
    const transaction = await axios.post(`${API_BASE_URL}/transactions`, transactionData, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    transactionId = transaction.data.data.id;
    console.log(`‚úÖ T·∫°o giao d·ªãch th√†nh c√¥ng, ID: ${transactionId}\n`);

    // 8. Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
    console.log('8. Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch...');
    const transactionStatus = await axios.get(`${API_BASE_URL}/transactions/${transactionId}`, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    console.log(`‚úÖ Tr·∫°ng th√°i giao d·ªãch: ${transactionStatus.data.data.trang_thai}\n`);

    // 9. User 2 x√°c nh·∫≠n giao d·ªãch
    console.log('9. User 2 x√°c nh·∫≠n giao d·ªãch...');
    const confirm = await axios.put(`${API_BASE_URL}/transactions/${transactionId}/confirm`, {}, {
      headers: { Authorization: `Bearer ${token2}` }
    });
    console.log('‚úÖ X√°c nh·∫≠n giao d·ªãch th√†nh c√¥ng\n');

    // 10. Ki·ªÉm tra tr·∫°ng th√°i sau khi x√°c nh·∫≠n
    console.log('10. Ki·ªÉm tra tr·∫°ng th√°i sau khi x√°c nh·∫≠n...');
    const finalStatus = await axios.get(`${API_BASE_URL}/transactions/${transactionId}`, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    console.log(`‚úÖ Tr·∫°ng th√°i cu·ªëi: ${finalStatus.data.data.trang_thai}\n`);

    // 11. Ki·ªÉm tra th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n
    console.log('11. Ki·ªÉm tra th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n...');
    try {
      const notifications = await axios.get(`${API_BASE_URL}/notifications`, {
        headers: { Authorization: `Bearer ${token2}` }
      });
      
      if (notifications.data.success) {
        console.log('‚úÖ L·∫•y th√¥ng b√°o th√†nh c√¥ng')
        console.log('üìã S·ªë l∆∞·ª£ng th√¥ng b√°o:', notifications.data.data.length)
        
        // T√¨m th√¥ng b√°o li√™n quan ƒë·∫øn giao d·ªãch n√†y
        const relatedNotifications = notifications.data.data.filter(n => 
          n.id_giao_dich === transactionId || 
          n.noi_dung.includes('l·ªãch xe m·ªõi')
        );
        
        if (relatedNotifications.length > 0) {
          console.log('‚úÖ T√¨m th·∫•y th√¥ng b√°o li√™n quan:')
          relatedNotifications.forEach((n, index) => {
            console.log(`  ${index + 1}. ID: ${n.id_thong_bao}, N·ªôi dung: "${n.noi_dung}", ƒê√£ ƒë·ªçc: ${n.da_doc}`)
          });
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng b√°o li√™n quan ƒë·∫øn giao d·ªãch n√†y')
        }
      } else {
        console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o:', notifications.data.message)
      }
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng b√°o:', error.response?.data || error.message)
    }

    // 12. Ki·ªÉm tra th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i
    console.log('12. Ki·ªÉm tra th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i...');
    try {
      const senderNotifications = await axios.get(`${API_BASE_URL}/notifications`, {
        headers: { Authorization: `Bearer ${token1}` }
      });
      
      if (senderNotifications.data.success) {
        console.log('‚úÖ L·∫•y th√¥ng b√°o ng∆∞·ªùi g·ª≠i th√†nh c√¥ng')
        console.log('üìã S·ªë l∆∞·ª£ng th√¥ng b√°o:', senderNotifications.data.data.length)
        
        // T√¨m th√¥ng b√°o li√™n quan ƒë·∫øn giao d·ªãch n√†y
        const senderRelatedNotifications = senderNotifications.data.data.filter(n => 
          n.id_giao_dich === transactionId
        );
        
        if (senderRelatedNotifications.length > 0) {
          console.log('‚úÖ T√¨m th·∫•y th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i:')
          senderRelatedNotifications.forEach((n, index) => {
            console.log(`  ${index + 1}. ID: ${n.id_thong_bao}, N·ªôi dung: "${n.noi_dung}", ƒê√£ ƒë·ªçc: ${n.da_doc}`)
          });
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i')
        }
      } else {
        console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o ng∆∞·ªùi g·ª≠i:', senderNotifications.data.message)
      }
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng b√°o ng∆∞·ªùi g·ª≠i:', error.response?.data || error.message)
    }

    // 13. Ki·ªÉm tra l·ªãch xe c√≥ th√¥ng tin ng∆∞·ªùi nh·∫≠n
    console.log('13. Ki·ªÉm tra l·ªãch xe c√≥ th√¥ng tin ng∆∞·ªùi nh·∫≠n...');
    try {
      const scheduleCheck = await axios.get(`${API_BASE_URL}/schedules/${scheduleId}`, {
        headers: { Authorization: `Bearer ${token1}` }
      });
      console.log('‚úÖ L·ªãch xe v·∫´n t·ªìn t·∫°i sau khi x√°c nh·∫≠n');
      console.log('üìã Th√¥ng tin l·ªãch xe:', {
        id_nguoi_tao: scheduleCheck.data.data.id_nguoi_tao,
        id_nguoi_nhan: scheduleCheck.data.data.id_nguoi_nhan,
        ten_nguoi_nhan: scheduleCheck.data.data.ten_nguoi_nhan
      });
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra l·ªãch xe:', error.response?.data || error.message);
    }

    // 14. Ki·ªÉm tra th√¥ng b√°o l·ªãch xe cho ng∆∞·ªùi nh·∫≠n
    console.log('14. Ki·ªÉm tra th√¥ng b√°o l·ªãch xe cho ng∆∞·ªùi nh·∫≠n...');
    try {
      const scheduleNotifications = await axios.get(`${API_BASE_URL}/notifications`, {
        headers: { Authorization: `Bearer ${token2}` }
      });
      
      if (scheduleNotifications.data.success) {
        // T√¨m th√¥ng b√°o l·ªãch xe
        const scheduleRelatedNotifications = scheduleNotifications.data.data.filter(n => 
          n.noi_dung.includes('l·ªãch xe m·ªõi')
        );
        
        if (scheduleRelatedNotifications.length > 0) {
          console.log('‚úÖ T√¨m th·∫•y th√¥ng b√°o l·ªãch xe:')
          scheduleRelatedNotifications.forEach((n, index) => {
            console.log(`  ${index + 1}. ID: ${n.id_thong_bao}, N·ªôi dung: "${n.noi_dung}", ƒê√£ ƒë·ªçc: ${n.da_doc}`)
          });
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng b√°o l·ªãch xe')
        }
      } else {
        console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o l·ªãch xe:', scheduleNotifications.data.message)
      }
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra th√¥ng b√°o l·ªãch xe:', error.response?.data || error.message)
    }

    // 15. Ki·ªÉm tra s·ªë d∆∞ v√† ƒëi·ªÉm sau khi x√°c nh·∫≠n
    console.log('15. Ki·ªÉm tra s·ªë d∆∞ v√† ƒëi·ªÉm sau khi x√°c nh·∫≠n...');
    try {
      // Ki·ªÉm tra s·ªë d∆∞ v√† ƒëi·ªÉm c·ªßa user1 (ng∆∞·ªùi giao l·ªãch)
      const user1BalanceResponse = await axios.get(`${API_BASE_URL}/users/${userId1}`, {
        headers: { Authorization: `Bearer ${token1}` }
      });
      
      if (user1BalanceResponse.data.success) {
        const user1Data = user1BalanceResponse.data.data;
        console.log('‚úÖ User1 (ng∆∞·ªùi giao l·ªãch) sau khi x√°c nh·∫≠n:')
        console.log('  S·ªë d∆∞:', user1Data.so_du)
        console.log('  ƒêi·ªÉm:', user1Data.diem)
        console.log('  K·ª≥ v·ªçng: s·ªë d∆∞ +50000, ƒëi·ªÉm +10')
      }
      
      // Ki·ªÉm tra s·ªë d∆∞ v√† ƒëi·ªÉm c·ªßa user2 (ng∆∞·ªùi nh·∫≠n l·ªãch)
      const user2BalanceResponse = await axios.get(`${API_BASE_URL}/users/${userId2}`, {
        headers: { Authorization: `Bearer ${token2}` }
      });
      
      if (user2BalanceResponse.data.success) {
        const user2Data = user2BalanceResponse.data.data;
        console.log('‚úÖ User2 (ng∆∞·ªùi nh·∫≠n l·ªãch) sau khi x√°c nh·∫≠n:')
        console.log('  S·ªë d∆∞:', user2Data.so_du)
        console.log('  ƒêi·ªÉm:', user2Data.diem)
        console.log('  K·ª≥ v·ªçng: s·ªë d∆∞ -50000, ƒëi·ªÉm -10')
      }
    } catch (error) {
      console.log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra s·ªë d∆∞ v√† ƒëi·ªÉm:', error.response?.data || error.message);
    }

    console.log('=== Test flow x√°c nh·∫≠n th√†nh c√¥ng! ===\n');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.response?.data || error.message);
  }
}

// Test flow h·ªßy giao d·ªãch
async function testCancelFlow() {
  console.log('=== B·∫Øt ƒë·∫ßu test flow h·ªßy giao d·ªãch ===\n');

  try {
    // T·∫°o giao d·ªãch m·ªõi ƒë·ªÉ test h·ªßy
    console.log('1. T·∫°o giao d·ªãch m·ªõi ƒë·ªÉ test h·ªßy...');
    const groups = await axios.get(`${API_BASE_URL}/groups`, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    const groupId = groups.data.data[0]?.id_nhom;
    
    const members = await axios.get(`${API_BASE_URL}/groups/${groupId}/members`, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    const recipientId = members.data.data.find(m => m.ten_dang_nhap === 'user1')?.id_nguoi_dung;
    
    const [vehicleTypes, routeTypes] = await Promise.all([
      axios.get(`${API_BASE_URL}/schedules/vehicle-types`, {
        headers: { Authorization: `Bearer ${token1}` }
      }),
      axios.get(`${API_BASE_URL}/schedules/route-types`, {
        headers: { Authorization: `Bearer ${token1}` }
      })
    ]);
    const vehicleTypeId = vehicleTypes.data.data[0]?.id_loai_xe;
    const routeTypeId = routeTypes.data.data[0]?.id_loai_tuyen;
    
    // T·∫°o l·ªãch xe m·ªõi
    const scheduleData = {
      id_loai_xe: vehicleTypeId,
      id_loai_tuyen: routeTypeId,
      thoi_gian_bat_dau_don: '2024-01-21T08:00:00',
      thoi_gian_ket_thuc_don: '2024-01-21T09:00:00',
      thoi_gian_bat_dau_tra: '2024-01-21T17:00:00',
      thoi_gian_ket_thuc_tra: '2024-01-21T18:00:00',
      id_nhom: groupId
    };
    
    const schedule = await axios.post(`${API_BASE_URL}/schedules`, scheduleData, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    const newScheduleId = schedule.data.data.id;
    console.log(`‚úÖ T·∫°o l·ªãch xe m·ªõi th√†nh c√¥ng, ID: ${newScheduleId}`);
    
    // T·∫°o giao d·ªãch m·ªõi
    const transactionData = {
      id_loai_giao_dich: 1,
      id_nguoi_nhan: recipientId,
      id_nhom: groupId,
      id_lich_xe: newScheduleId,
      so_tien: 300000,
      diem: 30,
      noi_dung: 'Giao l·ªãch xe kh√°ch H√† N·ªôi - ƒê√† N·∫µng (ƒë·ªÉ test h·ªßy)'
    };
    
    const transaction = await axios.post(`${API_BASE_URL}/transactions`, transactionData, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    const newTransactionId = transaction.data.data.id;
    console.log(`‚úÖ T·∫°o giao d·ªãch m·ªõi th√†nh c√¥ng, ID: ${newTransactionId}\n`);

    // 2. H·ªßy giao d·ªãch
    console.log('2. H·ªßy giao d·ªãch...');
    const cancel = await axios.put(`${API_BASE_URL}/transactions/${newTransactionId}/cancel`, {}, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    console.log('‚úÖ H·ªßy giao d·ªãch th√†nh c√¥ng\n');

    // 3. Ki·ªÉm tra tr·∫°ng th√°i sau khi h·ªßy
    console.log('3. Ki·ªÉm tra tr·∫°ng th√°i sau khi h·ªßy...');
    const cancelStatus = await axios.get(`${API_BASE_URL}/transactions/${newTransactionId}`, {
      headers: { Authorization: `Bearer ${token1}` }
    });
    console.log(`‚úÖ Tr·∫°ng th√°i sau khi h·ªßy: ${cancelStatus.data.data.trang_thai}\n`);

    // 4. Ki·ªÉm tra l·ªãch xe c√≥ b·ªã x√≥a kh√¥ng
    console.log('4. Ki·ªÉm tra l·ªãch xe c√≥ b·ªã x√≥a kh√¥ng...');
    try {
      const scheduleCheck = await axios.get(`${API_BASE_URL}/schedules/${newScheduleId}`, {
        headers: { Authorization: `Bearer ${token1}` }
      });
      console.log('‚ùå L·ªãch xe v·∫´n c√≤n t·ªìn t·∫°i');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ L·ªãch xe ƒë√£ b·ªã x√≥a th√†nh c√¥ng');
      } else {
        console.log('‚ùå L·ªói khi ki·ªÉm tra l·ªãch xe:', error.response?.data || error.message);
      }
    }

    console.log('=== Test flow h·ªßy th√†nh c√¥ng! ===\n');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test h·ªßy:', error.response?.data || error.message);
  }
}

// Ch·∫°y test
async function runTests() {
  await testTransactionFlow();
  await testCancelFlow();
  console.log('=== Ho√†n th√†nh t·∫•t c·∫£ tests ===');
}

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  runTests();
}

module.exports = { testTransactionFlow, testCancelFlow };
