console.log('=== TEST JAVASCRIPT DECIMAL HANDLING ===\n');

// Test 1: Ki·ªÉm tra c√°ch JavaScript x·ª≠ l√Ω s·ªë th·∫≠p ph√¢n
console.log('1. Test c√°ch JavaScript x·ª≠ l√Ω s·ªë th·∫≠p ph√¢n...');

const testNumbers = [3.5, 2.75, 1.25, 0.5, -3.5, -2.75];

for (const num of testNumbers) {
  console.log(`Number: ${num}, Type: ${typeof num}`);
}

// Test 2: Test ph√©p t√≠nh
console.log('\n2. Test ph√©p t√≠nh...');

for (const num of testNumbers) {
  const addNum = 1.5;
  const result = num + addNum;
  console.log(`${num} + ${addNum} = ${result} (Type: ${typeof result})`);
}

// Test 3: Test v·ªõi || 0
console.log('\n3. Test v·ªõi || 0...');

for (const num of testNumbers) {
  const result1 = num || 0;
  const result2 = parseFloat(num) || 0;
  const result3 = Number(num) || 0;
  
  console.log(`Number: ${num}`);
  console.log(`  num || 0: ${result1} (Type: ${typeof result1})`);
  console.log(`  parseFloat(num) || 0: ${result2} (Type: ${typeof result2})`);
  console.log(`  Number(num) || 0: ${result3} (Type: ${typeof result3})`);
}

// Test 4: Test v·ªõi null v√† undefined
console.log('\n4. Test v·ªõi null v√† undefined...');

const nullValues = [null, undefined, 0, false, ''];

for (const val of nullValues) {
  const result1 = val || 0;
  const result2 = parseFloat(val) || 0;
  const result3 = Number(val) || 0;
  
  console.log(`Value: ${val} (Type: ${typeof val})`);
  console.log(`  val || 0: ${result1} (Type: ${typeof result1})`);
  console.log(`  parseFloat(val) || 0: ${result2} (Type: ${typeof result2})`);
  console.log(`  Number(val) || 0: ${result3} (Type: ${typeof result3})`);
}

// Test 5: Test v·ªõi string numbers
console.log('\n5. Test v·ªõi string numbers...');

const stringNumbers = ['3.5', '2.75', '1.25', '0.5', '-3.5', '-2.75'];

for (const str of stringNumbers) {
  const result1 = str || 0;
  const result2 = parseFloat(str) || 0;
  const result3 = Number(str) || 0;
  
  console.log(`String: "${str}" (Type: ${typeof str})`);
  console.log(`  str || 0: ${result1} (Type: ${typeof result1})`);
  console.log(`  parseFloat(str) || 0: ${result2} (Type: ${typeof result2})`);
  console.log(`  Number(str) || 0: ${result3} (Type: ${typeof result3})`);
}

// Test 6: Test ph√©p t√≠nh v·ªõi string numbers
console.log('\n6. Test ph√©p t√≠nh v·ªõi string numbers...');

for (const str of stringNumbers) {
  const num = parseFloat(str);
  const addNum = 1.5;
  const result = num + addNum;
  
  console.log(`"${str}" (${num}) + ${addNum} = ${result} (Type: ${typeof result})`);
}

// Test 7: Test v·ªõi database-like values
console.log('\n7. Test v·ªõi database-like values...');

// M√¥ ph·ªèng d·ªØ li·ªáu t·ª´ database
const dbTransaction = {
  id: 1,
  so_tien: '100000.50',
  diem: '3.50'
};

console.log('Database transaction object:');
console.log('  so_tien:', dbTransaction.so_tien, '(Type:', typeof dbTransaction.so_tien, ')');
console.log('  diem:', dbTransaction.diem, '(Type:', typeof dbTransaction.diem, ')');

// Test c√°c c√°ch x·ª≠ l√Ω kh√°c nhau
const money1 = dbTransaction.so_tien || 0;
const money2 = parseFloat(dbTransaction.so_tien) || 0;
const money3 = Number(dbTransaction.so_tien) || 0;

const points1 = dbTransaction.diem || 0;
const points2 = parseFloat(dbTransaction.diem) || 0;
const points3 = Number(dbTransaction.diem) || 0;

console.log('\nX·ª≠ l√Ω so_tien:');
console.log('  so_tien || 0:', money1, '(Type:', typeof money1, ')');
console.log('  parseFloat(so_tien) || 0:', money2, '(Type:', typeof money2, ')');
console.log('  Number(so_tien) || 0:', money3, '(Type:', typeof money3, ')');

console.log('\nX·ª≠ l√Ω diem:');
console.log('  diem || 0:', points1, '(Type:', typeof points1, ')');
console.log('  parseFloat(diem) || 0:', points2, '(Type:', typeof points2, ')');
console.log('  Number(diem) || 0:', points3, '(Type:', typeof points3, ')');

// Test ph√©p t√≠nh
console.log('\nTest ph√©p t√≠nh:');
const addMoney = 50000.25;
const addPoints = 1.5;

console.log('Ti·ªÅn:', money1, '+', addMoney, '=', money1 + addMoney);
console.log('ƒêi·ªÉm:', points1, '+', addPoints, '=', points1 + addPoints);

console.log('\nV·ªõi parseFloat:');
console.log('Ti·ªÅn:', money2, '+', addMoney, '=', money2 + addMoney);
console.log('ƒêi·ªÉm:', points2, '+', addPoints, '=', points2 + addPoints);

// Test 8: Test v·ªõi gi√° tr·ªã th·ª±c t·∫ø t·ª´ database
console.log('\n8. Test v·ªõi gi√° tr·ªã th·ª±c t·∫ø t·ª´ database...');

// M√¥ ph·ªèng d·ªØ li·ªáu th·ª±c t·∫ø
const realTransaction = {
  id: 144,
  so_tien: '2000000.00',
  diem: '3.50'
};

console.log('Real transaction:');
console.log('  so_tien:', realTransaction.so_tien, '(Type:', typeof realTransaction.so_tien, ')');
console.log('  diem:', realTransaction.diem, '(Type:', typeof realTransaction.diem, ')');

// Test x·ª≠ l√Ω
const realMoney = parseFloat(realTransaction.so_tien) || 0;
const realPoints = parseFloat(realTransaction.diem) || 0;

console.log('\nSau khi x·ª≠ l√Ω:');
console.log('  so_tien:', realMoney, '(Type:', typeof realMoney, ')');
console.log('  diem:', realPoints, '(Type:', typeof realPoints, ')');

// Test ph√©p t√≠nh
const newMoney = realMoney + 100000;
const newPoints = realPoints + 2.5;

console.log('\nPh√©p t√≠nh:');
console.log('  Ti·ªÅn m·ªõi:', realMoney, '+ 100000 =', newMoney);
console.log('  ƒêi·ªÉm m·ªõi:', realPoints, '+ 2.5 =', newPoints);

console.log('\n=== K·∫æT LU·∫¨N ===');
console.log('‚úÖ parseFloat() gi·ªØ nguy√™n s·ªë th·∫≠p ph√¢n');
console.log('‚úÖ Number() gi·ªØ nguy√™n s·ªë th·∫≠p ph√¢n');
console.log('‚ùå || 0 c√≥ th·ªÉ g√¢y ra v·∫•n ƒë·ªÅ v·ªõi string numbers');
console.log('üí° N√™n s·ª≠ d·ª•ng parseFloat() ho·∫∑c Number() ƒë·ªÉ x·ª≠ l√Ω s·ªë t·ª´ database');
