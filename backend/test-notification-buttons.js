const axios = require('axios');
const API_BASE_URL = 'http://localhost:5000/api';

// Test users
const testUsers = [
  { username: 'admin', password: 'Admin@123' },
  { username: 'nguyenvanA', password: 'User@123' },
  { username: 'tranthiB', password: 'User@123' }
];

let tokens = {};
let userId1, userId2, userId3;

async function testNotificationButtons() {
  console.log('=== TEST NOTIFICATION BUTTONS ===\n');

  try {
    // 1. ƒêƒÉng nh·∫≠p users
    console.log('1. ƒêƒÉng nh·∫≠p users...');
    for (const user of testUsers) {
      const loginResponse = await axios.post(`${API_BASE_URL}/users/login`, {
        ten_dang_nhap: user.username,
        mat_khau: user.password
      });
      
      if (loginResponse.data.success) {
        tokens[user.username] = loginResponse.data.data.token;
        if (user.username === 'nguyenvanA') userId1 = loginResponse.data.data.user.id_nguoi_dung;
        if (user.username === 'tranthiB') userId2 = loginResponse.data.data.user.id_nguoi_dung;
        if (user.username === 'admin') userId3 = loginResponse.data.data.user.id_nguoi_dung;
        console.log(`‚úÖ ${user.username} ƒëƒÉng nh·∫≠p th√†nh c√¥ng`);
      }
    }

    // 2. T·∫°o giao d·ªãch giao l·ªãch ƒë·ªÉ test
    console.log('\n2. T·∫°o giao d·ªãch giao l·ªãch ƒë·ªÉ test...');
    let transactionId;
    let scheduleId;
    
    if (tokens['nguyenvanA']) {
      try {
        // T·∫°o l·ªãch xe tr∆∞·ªõc
        const scheduleResponse = await axios.post(`${API_BASE_URL}/schedules`, {
          id_loai_xe: 1,
          id_loai_tuyen: 1,
          thoi_gian_bat_dau_don: '2024-12-29T08:00:00',
          thoi_gian_ket_thuc_don: '2024-12-29T08:30:00',
          thoi_gian_bat_dau_tra: '2024-12-29T18:00:00',
          thoi_gian_ket_thuc_tra: '2024-12-29T18:30:00',
          id_nhom: 1,
          id_nguoi_nhan: userId2
        }, {
          headers: { Authorization: `Bearer ${tokens['nguyenvanA']}` }
        });

        if (scheduleResponse.data.success) {
          scheduleId = scheduleResponse.data.data.id;
          console.log('‚úÖ L·ªãch xe t·∫°o th√†nh c√¥ng v·ªõi ID:', scheduleId);
        }

        // T·∫°o giao d·ªãch giao l·ªãch
        const transactionResponse = await axios.post(`${API_BASE_URL}/transactions`, {
          id_loai_giao_dich: 1, // Giao l·ªãch
          id_nguoi_nhan: userId2,
          id_nhom: 1,
          id_lich_xe: scheduleId,
          so_tien: 200000,
          diem: 25,
          noi_dung: 'Test giao d·ªãch giao l·ªãch ƒë·ªÉ ki·ªÉm tra n√∫t trong modal th√¥ng b√°o'
        }, {
          headers: { Authorization: `Bearer ${tokens['nguyenvanA']}` }
        });
        
        if (transactionResponse.data.success) {
          transactionId = transactionResponse.data.data.id;
          console.log('‚úÖ Giao d·ªãch giao l·ªãch t·∫°o th√†nh c√¥ng v·ªõi ID:', transactionId);
        }
      } catch (error) {
        console.log('‚ùå L·ªói khi t·∫°o giao d·ªãch giao l·ªãch:', error.response?.data?.message || error.message);
      }
    }

    // 3. Ki·ªÉm tra th√¥ng b√°o v√† ph√¢n t√≠ch quy·ªÅn hi·ªÉn th·ªã n√∫t
    console.log('\n3. Ki·ªÉm tra th√¥ng b√°o v√† ph√¢n t√≠ch quy·ªÅn hi·ªÉn th·ªã n√∫t...');
    for (const user of testUsers) {
      if (tokens[user.username]) {
        try {
          const notificationResponse = await axios.get(`${API_BASE_URL}/notifications`, {
            headers: { Authorization: `Bearer ${tokens[user.username]}` }
          });
          
          if (notificationResponse.data.success) {
            const notifications = notificationResponse.data.data;
            const unreadCount = notifications.filter(n => !n.da_doc).length;
            console.log(`\n${user.username}: ${notifications.length} th√¥ng b√°o, ${unreadCount} ch∆∞a ƒë·ªçc`);
            
            // T√¨m th√¥ng b√°o li√™n quan ƒë·∫øn giao d·ªãch giao l·ªãch m·ªõi t·∫°o
            const relevantNotification = notifications.find(n => 
              n.id_giao_dich === transactionId && n.id_loai_giao_dich === 1
            );
            
            if (relevantNotification) {
              console.log(`  Th√¥ng b√°o giao d·ªãch giao l·ªãch:`);
              console.log(`    ID: ${relevantNotification.id_thong_bao}`);
              console.log(`    N·ªôi dung: ${relevantNotification.noi_dung}`);
              console.log(`    Tr·∫°ng th√°i: ${relevantNotification.trang_thai}`);
              console.log(`    Ng∆∞·ªùi g·ª≠i: ${relevantNotification.ten_nguoi_gui}`);
              console.log(`    Ng∆∞·ªùi nh·∫≠n: ${relevantNotification.ten_nguoi_nhan}`);
              
              // Ph√¢n t√≠ch quy·ªÅn hi·ªÉn th·ªã n√∫t
              const isSender = relevantNotification.ten_nguoi_gui === user.username;
              const isReceiver = relevantNotification.ten_nguoi_nhan === user.username;
              const isAdmin = user.username === 'admin';
              const isPending = relevantNotification.trang_thai === 'cho_xac_nhan';
              
              console.log(`  Ph√¢n t√≠ch quy·ªÅn:`);
              console.log(`    L√† ng∆∞·ªùi g·ª≠i: ${isSender}`);
              console.log(`    L√† ng∆∞·ªùi nh·∫≠n: ${isReceiver}`);
              console.log(`    L√† admin: ${isAdmin}`);
              console.log(`    Giao d·ªãch ch·ªù x·ª≠ l√Ω: ${isPending}`);
              
              if (isPending) {
                // Ki·ªÉm tra n√∫t x√°c nh·∫≠n
                if (isReceiver && relevantNotification.id_loai_giao_dich === 1) {
                  console.log(`    ‚úÖ C√ì N√öT "X√ÅC NH·∫¨N" (ng∆∞·ªùi nh·∫≠n giao d·ªãch giao l·ªãch)`);
                } else {
                  console.log(`    ‚ùå KH√îNG C√ì N√öT "X√ÅC NH·∫¨N"`);
                }
                
                // Ki·ªÉm tra n√∫t h·ªßy giao d·ªãch
                if (isSender || isReceiver || isAdmin) {
                  console.log(`    ‚úÖ C√ì N√öT "H·ª¶Y GIAO D·ªäCH" (ng∆∞·ªùi g·ª≠i, ng∆∞·ªùi nh·∫≠n ho·∫∑c admin)`);
                } else {
                  console.log(`    ‚ùå KH√îNG C√ì N√öT "H·ª¶Y GIAO D·ªäCH"`);
                }
                
                // T·ªïng k·∫øt
                const canTakeAction = (isReceiver && relevantNotification.id_loai_giao_dich === 1) || 
                                    (isSender || isReceiver || isAdmin);
                console.log(`    üìã T√ìM T·∫ÆT: ${canTakeAction ? 'C√ì TH·ªÇ TH·ª∞C HI·ªÜN H√ÄNH ƒê·ªòNG' : 'KH√îNG C√ì QUY·ªÄN'}`);
              } else {
                console.log(`    üìã Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, ch·ªâ hi·ªÉn th·ªã tr·∫°ng th√°i`);
              }
            } else {
              console.log(`  Kh√¥ng t√¨m th·∫•y th√¥ng b√°o li√™n quan ƒë·∫øn giao d·ªãch giao l·ªãch m·ªõi`);
            }
          }
        } catch (error) {
          console.log(`‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o c·ªßa ${user.username}`);
        }
      }
    }

    // 4. Test x√°c nh·∫≠n giao d·ªãch b·ªüi ng∆∞·ªùi nh·∫≠n
    if (transactionId && tokens['tranthiB']) {
      console.log('\n4. Test x√°c nh·∫≠n giao d·ªãch b·ªüi ng∆∞·ªùi nh·∫≠n...');
      try {
        const confirmResponse = await axios.put(`${API_BASE_URL}/transactions/${transactionId}/confirm`, {}, {
          headers: { Authorization: `Bearer ${tokens['tranthiB']}` }
        });
        
        if (confirmResponse.data.success) {
          console.log('‚úÖ Ng∆∞·ªùi nh·∫≠n x√°c nh·∫≠n giao d·ªãch th√†nh c√¥ng');
        } else {
          console.log('‚ùå Ng∆∞·ªùi nh·∫≠n x√°c nh·∫≠n giao d·ªãch th·∫•t b·∫°i:', confirmResponse.data.message);
        }
      } catch (error) {
        console.log('‚ùå L·ªói khi ng∆∞·ªùi nh·∫≠n x√°c nh·∫≠n giao d·ªãch:', error.response?.data?.message || error.message);
      }
    }

    // 5. Ki·ªÉm tra th√¥ng b√°o sau khi x√°c nh·∫≠n
    console.log('\n5. Ki·ªÉm tra th√¥ng b√°o sau khi x√°c nh·∫≠n...');
    for (const user of testUsers) {
      if (tokens[user.username]) {
        try {
          const notificationResponse = await axios.get(`${API_BASE_URL}/notifications`, {
            headers: { Authorization: `Bearer ${tokens[user.username]}` }
          });
          
          if (notificationResponse.data.success) {
            const notifications = notificationResponse.data.data;
            const relevantNotification = notifications.find(n => 
              n.id_giao_dich === transactionId && n.id_loai_giao_dich === 1
            );
            
            if (relevantNotification) {
              console.log(`${user.username}: Th√¥ng b√°o sau khi x√°c nh·∫≠n - Tr·∫°ng th√°i: ${relevantNotification.trang_thai}`);
              console.log(`  N·ªôi dung: ${relevantNotification.noi_dung}`);
              
              // Ki·ªÉm tra xem c√≥ c√≤n n√∫t h√†nh ƒë·ªông kh√¥ng
              if (relevantNotification.trang_thai === 'cho_xac_nhan') {
                console.log(`  ‚ö†Ô∏è V·∫™N C√íN N√öT H√ÄNH ƒê·ªòNG (c√≥ th·ªÉ c√≥ l·ªói)`);
              } else {
                console.log(`  ‚úÖ ƒê√É ·∫®N N√öT H√ÄNH ƒê·ªòNG, CH·ªà HI·ªÇN TH·ªä TR·∫†NG TH√ÅI`);
              }
            }
          }
        } catch (error) {
          console.log(`‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o c·ªßa ${user.username}`);
        }
      }
    }

    console.log('\n=== TEST HO√ÄN T·∫§T ===');
    console.log('\nKi·ªÉm tra tr√™n frontend:');
    console.log('1. Ng∆∞·ªùi nh·∫≠n ph·∫£i c√≥ C·∫¢ HAI n√∫t: "X√°c nh·∫≠n" v√† "H·ªßy giao d·ªãch"');
    console.log('2. Ng∆∞·ªùi g·ª≠i ch·ªâ c√≥ n√∫t "H·ªßy giao d·ªãch"');
    console.log('3. Admin c√≥ n√∫t "H·ªßy giao d·ªãch"');
    console.log('4. Sau khi x√°c nh·∫≠n/h·ªßy, t·∫•t c·∫£ n√∫t ph·∫£i bi·∫øn m·∫•t');

  } catch (error) {
    console.error('‚ùå L·ªói chung:', error.message);
  }
}

// Ch·∫°y test
testNotificationButtons();
